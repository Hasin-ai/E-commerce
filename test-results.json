{
  "collection": {
    "item": [
      {
        "id": "fec40ca5-4b24-446f-977a-95b94846c5f7",
        "name": "üîç Health Check",
        "item": [
          {
            "id": "7def6941-0e4b-4296-8d59-6f0446919279",
            "name": "GET /health - Basic Health Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "health"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3dc3b36f-e3f7-4452-9e30-aafd3bcd7e9c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('API is healthy', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('status', 'UP');",
                    "});"
                  ],
                  "_lastExecutionId": "09dc48aa-ba99-4e51-8970-2a15c8d98aea"
                }
              }
            ]
          },
          {
            "id": "604d1f22-679b-496d-8a59-71b08b0a1ab3",
            "name": "GET /health/detailed - Detailed Health Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "health",
                  "detailed"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bac3e319-a527-4a7d-853c-9df4accd3131",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Detailed health check successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('application');",
                    "    pm.expect(response.data).to.have.property('database');",
                    "    pm.expect(response.data).to.have.property('system');",
                    "});"
                  ],
                  "_lastExecutionId": "5136a752-ea07-4c64-98c9-9fa6f376e514"
                }
              }
            ]
          },
          {
            "id": "4e8447f0-daec-42ef-90f0-6cadeecf939c",
            "name": "GET /health/ready - Readiness Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "health",
                  "ready"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "88cd7412-7f23-42ab-9983-6f679773be13",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Application is ready', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('status', 'READY');",
                    "});"
                  ],
                  "_lastExecutionId": "4c3ca4e3-88a7-41f7-9792-badfbac8eb08"
                }
              }
            ]
          },
          {
            "id": "94abd93b-1c19-4673-8713-945370a13add",
            "name": "GET /health/live - Liveness Check",
            "request": {
              "url": {
                "path": [
                  "api",
                  "health",
                  "live"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c6799ab3-e556-4fd6-a5ad-93d37ccb0d9e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Application is alive', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('status', 'ALIVE');",
                    "});"
                  ],
                  "_lastExecutionId": "bfa47836-8dfc-40fd-ab80-65efae18e770"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2f09e56f-8fc2-43da-a1f7-54b4a07330f3",
        "name": "üîê Auth Domain",
        "item": [
          {
            "id": "80d010c6-8dd1-4af8-8079-04e231151a72",
            "name": "POST /auth/register - User Registration",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e774e70c-f5ed-4e88-b2d3-8a38946f8950",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User registration successful', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('id');",
                    "    pm.expect(response.data).to.have.property('email');",
                    "    pm.globals.set('user_id', response.data.id);",
                    "    pm.globals.set('test_email', JSON.parse(pm.request.body.raw).email);",
                    "    pm.globals.set('test_password', JSON.parse(pm.request.body.raw).password);",
                    "});",
                    "",
                    "pm.test('Response has correct structure', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.data).to.have.property('firstName');",
                    "    pm.expect(response.data).to.have.property('lastName');",
                    "    pm.expect(response.data).to.have.property('active');",
                    "});"
                  ],
                  "_lastExecutionId": "7095b881-7329-4d64-9b47-501b66e5d38c"
                }
              }
            ]
          },
          {
            "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
            "name": "POST /auth/login - User Authentication",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Login successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('accessToken');",
                    "    pm.expect(response.data).to.have.property('tokenType');",
                    "    pm.expect(response.data).to.have.property('user');",
                    "    pm.globals.set('auth_token', response.data.accessToken);",
                    "});",
                    "",
                    "pm.test('JWT token structure is valid', function () {",
                    "    const response = pm.response.json();",
                    "    const token = response.data.accessToken;",
                    "    pm.expect(token).to.be.a('string');",
                    "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                    "});",
                    "",
                    "pm.test('Token type is Bearer', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                    "});"
                  ],
                  "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
                }
              }
            ]
          },
          {
            "id": "8b3ae270-3b69-4e5a-b2fd-af2b9a815423",
            "name": "POST /auth/logout - User Logout",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "logout"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4c70d417-7eb9-401d-a32d-b90270c1454f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Logout successful', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "5980e873-bc8d-4fda-9173-fb14bbe77ad9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f54f5cfc-21b2-486a-b4c3-b3ea58ce8d70",
        "name": "üõçÔ∏è Product Domain",
        "item": [
          {
            "id": "84a2004e-f4c5-4151-9491-f57a51fe0368",
            "name": "GET /products - List All Products",
            "request": {
              "url": {
                "path": [
                  "api",
                  "products"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e6eccb25-bb81-4503-adb1-26ad6c4c21cf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Products retrieved successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('content');",
                    "});",
                    "",
                    "pm.test('Response has pagination structure', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.data).to.have.property('totalElements');",
                    "    pm.expect(response.data).to.have.property('totalPages');",
                    "    pm.expect(response.data).to.have.property('size');",
                    "});",
                    "",
                    "pm.test('Store first product ID for testing', function () {",
                    "    const response = pm.response.json();",
                    "    if (response.data.content && response.data.content.length > 0) {",
                    "        pm.globals.set('product_id', response.data.content[0].id);",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "e7d56f7f-2017-4f31-aa3a-d5a13061e56b"
                }
              }
            ]
          },
          {
            "id": "30debe7f-e3af-4eec-af69-d98b7f2f5edc",
            "name": "GET /products/{id} - Get Product Details",
            "request": {
              "url": {
                "path": [
                  "api",
                  "products",
                  "{{product_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "017054a7-21ba-4b07-8542-1893fce1c2c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Product details retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('id');",
                    "});",
                    "",
                    "pm.test('Product has required fields', function () {",
                    "    const response = pm.response.json();",
                    "    const product = response.data;",
                    "    pm.expect(product).to.have.property('name');",
                    "    pm.expect(product).to.have.property('price');",
                    "    pm.expect(product).to.have.property('category');",
                    "});"
                  ],
                  "_lastExecutionId": "348ed9fa-cb27-4bfe-86e7-b8b5013d7d16"
                }
              }
            ]
          },
          {
            "id": "126cd9fd-12af-40ca-ae11-87b102192762",
            "name": "GET /products/category/{categoryId} - Filter by Category ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "products",
                  "category",
                  "1"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b4601a4b-1034-4f1e-9f9f-cf18a82a9876",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Category filter works', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});"
                  ],
                  "_lastExecutionId": "aaee8c30-b0da-4030-ba85-6d35f12a1b3c"
                }
              }
            ]
          },
          {
            "id": "4fbe27e5-888b-45b8-9bac-48fa77aa7b27",
            "name": "GET /products/featured - Get Featured Products",
            "request": {
              "url": {
                "path": [
                  "api",
                  "products",
                  "featured"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5ba74e9b-4193-448a-b287-8a8850be560a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Featured products retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});"
                  ],
                  "_lastExecutionId": "cd81334f-124b-4715-b8ea-05890326cbe1"
                }
              }
            ]
          },
          {
            "id": "2e8c0aa5-84b2-4dff-8ab4-610b3715ae57",
            "name": "GET /products/slug/{slug} - Get Product by Slug",
            "request": {
              "url": {
                "path": [
                  "api",
                  "products",
                  "slug",
                  "gaming-laptop"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f1c51764-e4e5-4da9-9f4a-2b58c7c7d490",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Product retrieved by slug', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "fd674ef4-a0a1-4db0-b451-062e88bbe882"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fec37678-2adf-4f11-9767-8bf14b736b5e",
        "name": "üõí Cart Domain",
        "item": [
          {
            "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
            "name": "GET /cart - Get Current Cart",
            "request": {
              "url": {
                "path": [
                  "api",
                  "cart"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Cart retrieved successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});",
                    "",
                    "pm.test('Cart has required structure', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.data).to.have.property('userId');",
                    "    pm.expect(response.data).to.have.property('items');",
                    "});"
                  ],
                  "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
                }
              }
            ]
          },
          {
            "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
            "name": "POST /cart/items - Add Item to Cart",
            "request": {
              "url": {
                "path": [
                  "api",
                  "cart",
                  "items"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Item added to cart', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});",
                    "",
                    "pm.test('Store cart item ID', function () {",
                    "    const response = pm.response.json();",
                    "    if (response.data && response.data.items && response.data.items.length > 0) {",
                    "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
                }
              }
            ]
          },
          {
            "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
            "name": "PUT /cart/items/{itemId} - Update Item Quantity",
            "request": {
              "url": {
                "path": [
                  "api",
                  "cart",
                  "items",
                  "{{cart_item_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"quantity\": 3\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Cart item updated', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
                }
              }
            ]
          },
          {
            "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
            "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
            "request": {
              "url": {
                "path": [
                  "api",
                  "cart",
                  "items",
                  "{{cart_item_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Cart item removed', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});"
                  ],
                  "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
                }
              }
            ]
          },
          {
            "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
            "name": "DELETE /cart - Clear Cart",
            "request": {
              "url": {
                "path": [
                  "api",
                  "cart"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "313e064a-d390-4815-8822-77db1f306544",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Cart cleared successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
                }
              }
            ]
          },
          {
            "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
            "name": "GET /cart/count - Get Cart Item Count",
            "request": {
              "url": {
                "path": [
                  "api",
                  "cart",
                  "count"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Cart count retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.be.a('number');",
                    "});"
                  ],
                  "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "664fb0db-95ae-40bb-8b82-747af46fd277",
        "name": "üì¶ Order Domain",
        "item": [
          {
            "id": "f07b5440-c7c8-429d-b1be-a35618923389",
            "name": "POST /orders - Place Order",
            "request": {
              "url": {
                "path": [
                  "api",
                  "orders"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad37db6f-3435-4817-a044-c853fccad34d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Order placed successfully', function () {",
                    "    pm.response.to.have.status(201);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('id');",
                    "    pm.globals.set('order_id', response.data.id);",
                    "});",
                    "",
                    "pm.test('Order has required fields', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.data).to.have.property('status');",
                    "    pm.expect(response.data).to.have.property('totalAmount');",
                    "});"
                  ],
                  "_lastExecutionId": "4fae0364-0783-448a-943d-6b8a621963aa"
                }
              }
            ]
          },
          {
            "id": "1c6c5b6b-dbd4-4537-a664-f80560adda5d",
            "name": "GET /orders - View Order History",
            "request": {
              "url": {
                "path": [
                  "api",
                  "orders"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "35eb17d9-eb0e-459c-9722-9fee074d8943",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Order history retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});"
                  ],
                  "_lastExecutionId": "c599b18e-ae2e-4f75-9f56-1414b0ad7743"
                }
              }
            ]
          },
          {
            "id": "2e18ab89-ddd5-42b3-8266-bad7243c10f1",
            "name": "GET /orders/{id} - View Order Details",
            "request": {
              "url": {
                "path": [
                  "api",
                  "orders",
                  "{{order_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dae04371-5f74-4a8f-87a9-5afc151eeb08",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Order details retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data.id).to.equal(pm.globals.get('order_id'));",
                    "});"
                  ],
                  "_lastExecutionId": "b24dcf4b-ef4b-402e-b306-d4661104a54a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e71e6156-3dda-42b3-a75e-a69bc18d036a",
        "name": "üí≥ Payment Domain",
        "item": [
          {
            "id": "b180a27a-60c1-4892-b255-7475d03605d1",
            "name": "POST /payments/process - Process Payment",
            "request": {
              "url": {
                "path": [
                  "api",
                  "payments",
                  "process"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"orderId\": {{order_id}},\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Payment processed successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('id');",
                    "    pm.globals.set('payment_id', response.data.id);",
                    "});",
                    "",
                    "pm.test('Payment has transaction ID', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response.data).to.have.property('transactionId');",
                    "    pm.expect(response.data).to.have.property('status');",
                    "});"
                  ],
                  "_lastExecutionId": "0b4a1d14-0992-4878-9525-664a9d86377b"
                }
              }
            ]
          },
          {
            "id": "3dacbb33-4452-4eea-87bb-3b31ef9ef10e",
            "name": "GET /payments/{id} - View Payment Info",
            "request": {
              "url": {
                "path": [
                  "api",
                  "payments",
                  "{{payment_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e582258a-0ea4-4d01-9c29-4ade8d6a4210",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Payment details retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data.id).to.equal(pm.globals.get('payment_id'));",
                    "});"
                  ],
                  "_lastExecutionId": "b1c765b2-0d9d-4c72-9192-aff52432836a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f4ab591f-57bf-4c95-a150-f65238cfa61d",
        "name": "üë§ User Management",
        "item": [
          {
            "id": "c38a2dd0-8cd7-4a6f-a72b-a068e500e341",
            "name": "GET /users/profile - Get Current User Profile",
            "request": {
              "url": {
                "path": [
                  "api",
                  "users",
                  "profile"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b241b30d-1b88-436e-8fa1-eb19e8beca9a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User profile retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('id');",
                    "    pm.expect(response.data).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "9c462a38-d8ea-43dd-8ac6-8e025e844a03"
                }
              }
            ]
          },
          {
            "id": "6a591117-672a-44e5-bf5d-27bfe632c67d",
            "name": "GET /users/{id} - Get User by ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "users",
                  "{{user_id}}"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9303e445-cd5e-4634-82a8-2a6bc8c54a4f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User retrieved by ID', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "f9a88cf1-d9ce-4b56-ae05-1aad96f25a68"
                }
              }
            ]
          },
          {
            "id": "8a450da8-5f8e-4202-b320-63049eac50e8",
            "name": "PUT /users/profile - Update Current User Profile",
            "request": {
              "url": {
                "path": [
                  "api",
                  "users",
                  "profile"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"phone\": \"+1234567891\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5650bd40-9978-4f15-9a71-f0f08dc1cbf9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('User profile updated', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});"
                  ],
                  "_lastExecutionId": "23083286-9110-4bb2-a568-413857f6618d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "80c13894-55f4-4c3e-8934-197cda47ab50",
        "name": "üîç Search & Recommendations",
        "item": [
          {
            "id": "e156509b-558c-47d0-b647-94698aed65c6",
            "name": "GET /search/products - Search Products",
            "request": {
              "url": {
                "path": [
                  "api",
                  "search",
                  "products"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "query",
                    "value": "laptop"
                  },
                  {
                    "key": "category",
                    "value": "electronics"
                  },
                  {
                    "key": "minPrice",
                    "value": "500"
                  },
                  {
                    "key": "maxPrice",
                    "value": "2000"
                  },
                  {
                    "key": "sortBy",
                    "value": "price"
                  },
                  {
                    "key": "sortDirection",
                    "value": "asc"
                  },
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a1212ca2-bae5-4c4c-8377-33a0ae5cd4d5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Search results retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('products');",
                    "    pm.expect(response.data).to.have.property('totalElements');",
                    "});"
                  ],
                  "_lastExecutionId": "8eaef3f9-5dff-4089-ae5c-efaf77d4b869"
                }
              }
            ]
          },
          {
            "id": "0a33d1cc-ba94-4986-a6b6-99e3116f6227",
            "name": "GET /search/recommendations - Get Recommendations",
            "request": {
              "url": {
                "path": [
                  "api",
                  "search",
                  "recommendations"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "limit",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3836f8ba-4880-47d2-a136-5fd12afe27e6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Recommendations retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});"
                  ],
                  "_lastExecutionId": "a5b3f87a-a881-4cf8-aa82-d9998c517bff"
                }
              }
            ]
          },
          {
            "id": "5e4a391d-44ce-4610-9cdd-d0463828c8a2",
            "name": "GET /search/suggestions - Get Search Suggestions",
            "request": {
              "url": {
                "path": [
                  "api",
                  "search",
                  "suggestions"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "query",
                    "value": "lap"
                  },
                  {
                    "key": "limit",
                    "value": "5"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d4d826dc-8ac1-4d13-b51d-7e2b973c9521",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Search suggestions retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});"
                  ],
                  "_lastExecutionId": "b21e34c6-4973-44dd-b7b7-298f18e79d20"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "771cdbc6-a9ee-49fa-a461-8998efa38d7a",
        "name": "üõí Checkout",
        "item": [
          {
            "id": "82d8f5ae-fc3f-4b20-95bb-2b487cc67ff6",
            "name": "POST /checkout - Complete Checkout",
            "request": {
              "url": {
                "path": [
                  "api",
                  "checkout"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7b738a1f-b741-4d6c-ab91-8bf9647fd0f2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Checkout completed successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('orderId');",
                    "    pm.expect(response.data).to.have.property('paymentId');",
                    "    pm.globals.set('order_id', response.data.orderId);",
                    "    pm.globals.set('payment_id', response.data.paymentId);",
                    "});"
                  ],
                  "_lastExecutionId": "be727c68-2b26-4635-afab-a1e2bf62794e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e3a87e7b-0720-4d65-8798-d3bd87ffb72d",
        "name": "üìä Analytics",
        "item": [
          {
            "id": "32aef58b-ddf2-43bc-8c31-d09ff64adebb",
            "name": "POST /analytics/track - Track Event",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "track"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"eventType\": \"PRODUCT_VIEW\",\n  \"productId\": {{product_id}},\n  \"category\": \"electronics\",\n  \"page\": \"/products/gaming-laptop\",\n  \"referrer\": \"/search\",\n  \"metadata\": {\n    \"source\": \"search\",\n    \"position\": 1,\n    \"search_query\": \"gaming laptop\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ccb547d1-6ec9-473f-aa85-cefe64c7b4f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Event tracked successfully', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('success', true);",
                    "});"
                  ],
                  "_lastExecutionId": "f8f632d8-4eb2-4fae-bbe2-a608ede78830"
                }
              }
            ]
          },
          {
            "id": "bf893da4-40c1-4b74-b71f-36ef7854e1fe",
            "name": "GET /analytics/admin/dashboard - Admin Dashboard (Admin Only)",
            "request": {
              "url": {
                "path": [
                  "api",
                  "analytics",
                  "admin",
                  "dashboard"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "startDate",
                    "value": "2025-01-01"
                  },
                  {
                    "key": "endDate",
                    "value": "2025-01-31"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{admin_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "58577893-9043-461d-8920-1aa6b01fb847",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Admin dashboard retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.have.property('totalRevenue');",
                    "    pm.expect(response.data).to.have.property('totalOrders');",
                    "});"
                  ],
                  "_lastExecutionId": "9c131c21-51e9-4a64-9104-0130cb2d586c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fbf60545-9182-4107-8c8d-ba043e7a7e3b",
        "name": "üîî Notifications",
        "item": [
          {
            "id": "a7e5e990-8dab-4d41-83dd-1f59a95bd9b1",
            "name": "GET /notifications - Get User Notifications",
            "request": {
              "url": {
                "path": [
                  "api",
                  "notifications"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "0"
                  },
                  {
                    "key": "size",
                    "value": "20"
                  },
                  {
                    "key": "unreadOnly",
                    "value": "false"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3a05abbb-6458-4617-81f5-77b292109435",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Notifications retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "});"
                  ],
                  "_lastExecutionId": "26f713d6-3009-424f-8cb4-6df73fa492f1"
                }
              }
            ]
          },
          {
            "id": "5892477b-d9c0-428a-9b8e-06ea561f838f",
            "name": "GET /notifications/unread/count - Get Unread Count",
            "request": {
              "url": {
                "path": [
                  "api",
                  "notifications",
                  "unread",
                  "count"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "db942fe2-a7b9-4482-8d1b-055e911382ed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unread count retrieved', function () {",
                    "    pm.response.to.have.status(200);",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('data');",
                    "    pm.expect(response.data).to.be.a('number');",
                    "});"
                  ],
                  "_lastExecutionId": "a1b6b667-2fc5-4dfa-9513-b66fb26aedc1"
                }
              }
            ]
          },
          {
            "id": "80892317-f498-490b-882f-528f539d1583",
            "name": "PUT /notifications/{id}/read - Mark as Read",
            "request": {
              "url": {
                "path": [
                  "api",
                  "notifications",
                  "1",
                  "read"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                }
              ],
              "method": "PUT"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fb9fd3ae-f95f-4673-af3e-cd9140ef2504",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Notification marked as read', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "582fbea4-7960-49a9-971b-1d0306b632be"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f6de97f5-66d5-4e9f-a438-65716df3b8b9",
        "name": "‚ö†Ô∏è Error Scenarios",
        "item": [
          {
            "id": "2a6ed5ee-5820-4ce0-9cca-0258cce505d4",
            "name": "GET /products/999999 - Invalid Product ID",
            "request": {
              "url": {
                "path": [
                  "api",
                  "products",
                  "999999"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "838f29e2-79a3-43e7-85ac-32333f9c336c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid product ID returns 404', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error response has proper structure', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('message');",
                    "});"
                  ],
                  "_lastExecutionId": "37544f47-ac20-4aad-a7bd-603bdf043e77"
                }
              }
            ]
          },
          {
            "id": "2bbfb074-24e6-485b-952c-f112e93c149f",
            "name": "GET /cart - Unauthorized Access",
            "request": {
              "url": {
                "path": [
                  "api",
                  "cart"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a3a7ac1b-227b-4c00-af7d-e184f0cdc26e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Unauthorized access returns 401', function () {",
                    "    pm.response.to.have.status(401);",
                    "});"
                  ],
                  "_lastExecutionId": "685448b8-aeaf-469a-bb79-8690d049daa8"
                }
              }
            ]
          },
          {
            "id": "f843f282-b898-40ea-8371-a6f17e44110e",
            "name": "POST /auth/login - Invalid Credentials",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "eebe0d34-cc78-44ac-8193-dbcbae8127f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid credentials return proper error', function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test('Error message is helpful', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('message');",
                    "    pm.expect(response.message).to.be.a('string');",
                    "});"
                  ],
                  "_lastExecutionId": "53480ac7-fe2e-4431-988f-3791e4b93e4c"
                }
              }
            ]
          },
          {
            "id": "2c2990bb-1f83-4fbc-9a36-62812ef2fea0",
            "name": "POST /auth/register - Duplicate Email",
            "request": {
              "url": {
                "path": [
                  "api",
                  "auth",
                  "register"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"{{test_email}}\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b7a60c27-afd0-4c62-938b-561fd7304ea2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Duplicate email returns error', function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test('Error indicates duplicate email', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('message');",
                    "});"
                  ],
                  "_lastExecutionId": "e0d06d03-3581-4d2d-89b9-af9e040cc161"
                }
              }
            ]
          },
          {
            "id": "a8433dbb-533a-4896-ad7f-ccbb4497e8b5",
            "name": "POST /cart/items - Add Invalid Product",
            "request": {
              "url": {
                "path": [
                  "api",
                  "cart",
                  "items"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"productId\": 999999,\n  \"quantity\": 1\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c5cf4697-9691-4345-a352-66bd62cd2dbd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Invalid product ID returns error', function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test('Error response has proper structure', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('message');",
                    "});"
                  ],
                  "_lastExecutionId": "c4e8d648-686d-4d5c-9e73-7c8d12f4f927"
                }
              }
            ]
          },
          {
            "id": "87f075ae-9964-4785-81a1-78420e8d3e78",
            "name": "POST /orders - Create Order with Empty Cart",
            "request": {
              "url": {
                "path": [
                  "api",
                  "orders"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{auth_token}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a7bf42d2-09a3-4bb0-8b1c-05b7ea35b660",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Empty cart returns error', function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test('Error message indicates empty cart', function () {",
                    "    const response = pm.response.json();",
                    "    pm.expect(response).to.have.property('message');",
                    "});"
                  ],
                  "_lastExecutionId": "73391129-b5d6-4c54-8b4b-ef3eb926966b"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "type": "string",
          "value": "{{auth_token}}",
          "key": "token"
        }
      ]
    },
    "event": [],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8080",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "",
        "key": "auth_token"
      },
      {
        "type": "string",
        "value": "",
        "key": "admin_token"
      },
      {
        "type": "string",
        "value": "",
        "key": "user_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "product_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "cart_item_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "order_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "payment_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "test_email"
      },
      {
        "type": "string",
        "value": "",
        "key": "test_password"
      }
    ],
    "info": {
      "_postman_id": "301831bb-e282-4ee7-8b74-18b73b9512d0",
      "name": "E-Commerce API - Complete Test Collection",
      "version": {
        "raw": "2.0.0",
        "major": 2,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "2.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive API testing collection for E-Commerce Application with all endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "62faeed3-8002-4c67-91d0-898534b7a363",
    "values": []
  },
  "globals": {
    "id": "b75abe68-fca0-4ab0-9024-f5a9d4ea9123",
    "values": [
      {
        "type": "any",
        "value": 2,
        "key": "user_id"
      },
      {
        "type": "any",
        "value": "john.doe.975@example.com",
        "key": "test_email"
      },
      {
        "type": "any",
        "value": "SecurePassword123!",
        "key": "test_password"
      },
      {
        "type": "any",
        "value": 1,
        "key": "product_id"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 56,
        "pending": 0,
        "failed": 31
      },
      "testScripts": {
        "total": 41,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 8.975609756097562,
      "responseMin": 4,
      "responseMax": 81,
      "responseSd": 12.204532954119854,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753693453235,
      "completed": 1753693454237
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 41,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7b374a7-980b-4bdd-89a9-7e421989d718",
          "httpRequestId": "5efc174b-c73c-4b93-ba04-26b4ea813df0"
        },
        "item": {
          "id": "7def6941-0e4b-4296-8d59-6f0446919279",
          "name": "GET /health - Basic Health Check",
          "request": {
            "url": {
              "path": [
                "api",
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3dc3b36f-e3f7-4452-9e30-aafd3bcd7e9c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'UP');",
                  "});"
                ],
                "_lastExecutionId": "09dc48aa-ba99-4e51-8970-2a15c8d98aea"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "875d1e4a-42ed-469b-92c7-e18c3ee5a1f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "f767ced1-a314-4119-ba13-2b6e2bba8fef",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              58,
              34,
              85,
              80,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              45,
              99,
              111,
              109,
              109,
              101,
              114,
              99,
              101,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              114,
              117,
              110,
              110,
              105,
              110,
              103,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              85,
              80,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              50,
              54,
              55,
              56,
              55,
              48,
              52,
              54,
              51,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 29,
          "responseSize": 137
        },
        "id": "7def6941-0e4b-4296-8d59-6f0446919279",
        "assertions": [
          {
            "assertion": "API is healthy",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "02ccd2e4-ddd7-4bf3-b199-5d8082eea1d6",
          "length": 41,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b87e5bb5-bf67-482f-8010-1adf5c15735d"
        },
        "item": {
          "id": "604d1f22-679b-496d-8a59-71b08b0a1ab3",
          "name": "GET /health/detailed - Detailed Health Check",
          "request": {
            "url": {
              "path": [
                "api",
                "health",
                "detailed"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bac3e319-a527-4a7d-853c-9df4accd3131",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Detailed health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('application');",
                  "    pm.expect(response.data).to.have.property('database');",
                  "    pm.expect(response.data).to.have.property('system');",
                  "});"
                ],
                "_lastExecutionId": "5136a752-ea07-4c64-98c9-9fa6f376e514"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "health",
              "detailed"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bdd22c7d-2a4c-43c7-a9e8-b688656069a3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1a44f86e-c34d-465d-af65-97c0c1e1cc71",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              58,
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              34,
              68,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              32,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              85,
              80,
              34,
              125,
              44,
              34,
              115,
              121,
              115,
              116,
              101,
              109,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              80,
              114,
              111,
              99,
              101,
              115,
              115,
              111,
              114,
              115,
              34,
              58,
              49,
              50,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              77,
              101,
              109,
              111,
              114,
              121,
              34,
              58,
              50,
              48,
              51,
              52,
              50,
              51,
              55,
              52,
              52,
              44,
              34,
              111,
              115,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              54,
              46,
              49,
              52,
              46,
              48,
              45,
              50,
              52,
              45,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              34,
              44,
              34,
              106,
              97,
              118,
              97,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              55,
              46,
              48,
              46,
              49,
              53,
              34,
              44,
              34,
              111,
              115,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              110,
              117,
              120,
              34,
              44,
              34,
              109,
              97,
              120,
              77,
              101,
              109,
              111,
              114,
              121,
              34,
              58,
              52,
              49,
              50,
              48,
              57,
              48,
              51,
              54,
              56,
              48,
              44,
              34,
              102,
              114,
              101,
              101,
              77,
              101,
              109,
              111,
              114,
              121,
              34,
              58,
              56,
              56,
              55,
              50,
              57,
              54,
              55,
              50,
              125,
              44,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              101,
              110,
              118,
              105,
              114,
              111,
              110,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              45,
              99,
              111,
              109,
              109,
              101,
              114,
              99,
              101,
              32,
              66,
              97,
              99,
              107,
              101,
              110,
              100,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              44,
              34,
              117,
              112,
              116,
              105,
              109,
              101,
              34,
              58,
              34,
              48,
              48,
              58,
              48,
              48,
              58,
              53,
              52,
              34,
              125,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              68,
              101,
              116,
              97,
              105,
              108,
              101,
              100,
              32,
              104,
              101,
              97,
              108,
              116,
              104,
              32,
              99,
              104,
              101,
              99,
              107,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              51,
              49,
              49,
              50,
              55,
              54,
              54,
              53,
              51,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 465
        },
        "id": "604d1f22-679b-496d-8a59-71b08b0a1ab3",
        "assertions": [
          {
            "assertion": "Detailed health check successful",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ef0423ba-4787-4207-babb-5d42fb9eb0b8",
          "length": 41,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "377f6151-5de6-49c0-ad9a-c27bc50760d3"
        },
        "item": {
          "id": "4e8447f0-daec-42ef-90f0-6cadeecf939c",
          "name": "GET /health/ready - Readiness Check",
          "request": {
            "url": {
              "path": [
                "api",
                "health",
                "ready"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88cd7412-7f23-42ab-9983-6f679773be13",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Application is ready', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'READY');",
                  "});"
                ],
                "_lastExecutionId": "4c3ca4e3-88a7-41f7-9792-badfbac8eb08"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "health",
              "ready"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e9af3e59-ad29-43d6-8a4d-59fce2f466a9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "04eabeac-804c-4249-a858-35922cf7ff22",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              115,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              58,
              34,
              85,
              80,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              82,
              69,
              65,
              68,
              89,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              51,
              51,
              50,
              56,
              57,
              53,
              54,
              49,
              48,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 87
        },
        "id": "4e8447f0-daec-42ef-90f0-6cadeecf939c",
        "assertions": [
          {
            "assertion": "Application is ready",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "626bc5fb-8f1c-4ed3-9cc6-73d35f2f4768",
          "length": 41,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9f36f139-5012-44e8-bae9-6e08c3d5e205"
        },
        "item": {
          "id": "94abd93b-1c19-4673-8713-945370a13add",
          "name": "GET /health/live - Liveness Check",
          "request": {
            "url": {
              "path": [
                "api",
                "health",
                "live"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c6799ab3-e556-4fd6-a5ad-93d37ccb0d9e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Application is alive', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'ALIVE');",
                  "});"
                ],
                "_lastExecutionId": "bfa47836-8dfc-40fd-ab80-65efae18e770"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "health",
              "live"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f36e9e16-cfbe-4cc0-8726-e617c98ca82a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a6d6ebec-e949-4693-b9b2-022c875582ee",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              65,
              76,
              73,
              86,
              69,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              51,
              53,
              57,
              52,
              51,
              48,
              53,
              53,
              49,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 60
        },
        "id": "94abd93b-1c19-4673-8713-945370a13add",
        "assertions": [
          {
            "assertion": "Application is alive",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d2ec9b33-8d80-43a4-83f4-38e316ce3995",
          "length": 41,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2d882a00-59ee-424f-8069-50d0b4205420"
        },
        "item": {
          "id": "80d010c6-8dd1-4af8-8079-04e231151a72",
          "name": "POST /auth/register - User Registration",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e774e70c-f5ed-4e88-b2d3-8a38946f8950",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('email');",
                  "    pm.globals.set('user_id', response.data.id);",
                  "    pm.globals.set('test_email', JSON.parse(pm.request.body.raw).email);",
                  "    pm.globals.set('test_password', JSON.parse(pm.request.body.raw).password);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('firstName');",
                  "    pm.expect(response.data).to.have.property('lastName');",
                  "    pm.expect(response.data).to.have.property('active');",
                  "});"
                ],
                "_lastExecutionId": "7095b881-7329-4d64-9b47-501b66e5d38c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "56a66ff4-c9be-49bf-95a2-c72813990b0d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "147",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.975@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "f4bfb17d-8365-42b6-af4a-30c41ab10392",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              46,
              100,
              111,
              101,
              46,
              57,
              55,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              52,
              53,
              53,
              56,
              50,
              52,
              50,
              49,
              54,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              52,
              53,
              53,
              57,
              50,
              52,
              53,
              51,
              50,
              93,
              44,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              52,
              53,
              56,
              50,
              54,
              56,
              55,
              51,
              50,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 81,
          "responseSize": 327
        },
        "id": "80d010c6-8dd1-4af8-8079-04e231151a72",
        "assertions": [
          {
            "assertion": "User registration successful",
            "skipped": false
          },
          {
            "assertion": "Response has correct structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b5571edf-56c7-4912-b1a7-e9ab7261ba71",
          "length": 41,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4639677f-dd4d-4a8b-a93e-79752ca924f0"
        },
        "item": {
          "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
          "name": "POST /auth/login - User Authentication",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('accessToken');",
                  "    pm.expect(response.data).to.have.property('tokenType');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.globals.set('auth_token', response.data.accessToken);",
                  "});",
                  "",
                  "pm.test('JWT token structure is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const token = response.data.accessToken;",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                  "});",
                  "",
                  "pm.test('Token type is Bearer', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                  "});"
                ],
                "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2877f82d-23aa-4db8-8537-ab19efb2e9c5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "35",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"\",\n  \"password\": \"\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6fe4eb2c-17f8-4c53-a92c-91f0243aee43",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              98,
              101,
              116,
              119,
              101,
              101,
              110,
              32,
              56,
              32,
              97,
              110,
              100,
              32,
              49,
              50,
              56,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              52,
              57,
              53,
              55,
              56,
              51,
              52,
              54,
              51,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 21,
          "responseSize": 185
        },
        "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
        "assertions": [
          {
            "assertion": "Login successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Login successful",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "JWT token structure is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "JWT token structure is valid",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "Token type is Bearer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Token type is Bearer",
              "message": "expected undefined to equal 'Bearer'",
              "stack": "AssertionError: expected undefined to equal 'Bearer'\n   at Object.eval sandbox-script.js:3:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "207fe973-0be2-4aaa-982c-b6dbba3546e1",
          "length": 41,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "41187d33-f7fa-4c82-86cd-545241ae5832"
        },
        "item": {
          "id": "8b3ae270-3b69-4e5a-b2fd-af2b9a815423",
          "name": "POST /auth/logout - User Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c70d417-7eb9-401d-a32d-b90270c1454f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "5980e873-bc8d-4fda-9173-fb14bbe77ad9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b6700ed7-7281-4d16-8ab3-acfb38999b77",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "49310f21-6eed-4682-9660-67354735a6db",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 60
        },
        "id": "8b3ae270-3b69-4e5a-b2fd-af2b9a815423",
        "assertions": [
          {
            "assertion": "Logout successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Logout successful",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e8a2d925-d893-450e-b5d7-52b3469e564f",
          "length": 41,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6e52a328-bb7a-4554-a336-16d6ffb9f612"
        },
        "item": {
          "id": "84a2004e-f4c5-4151-9491-f57a51fe0368",
          "name": "GET /products - List All Products",
          "request": {
            "url": {
              "path": [
                "api",
                "products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e6eccb25-bb81-4503-adb1-26ad6c4c21cf",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Products retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('content');",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('totalElements');",
                  "    pm.expect(response.data).to.have.property('totalPages');",
                  "    pm.expect(response.data).to.have.property('size');",
                  "});",
                  "",
                  "pm.test('Store first product ID for testing', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data.content && response.data.content.length > 0) {",
                  "        pm.globals.set('product_id', response.data.content[0].id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "e7d56f7f-2017-4f31-aa3a-d5a13061e56b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "products"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7b7656cb-d477-42bb-893a-e02f72a13ddc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7784bc10-d598-4e3d-8c8f-fd029a4f7bb0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              97,
              109,
              105,
              110,
              103,
              32,
              76,
              97,
              112,
              116,
              111,
              112,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              105,
              103,
              104,
              45,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              32,
              103,
              97,
              109,
              105,
              110,
              103,
              32,
              108,
              97,
              112,
              116,
              111,
              112,
              32,
              119,
              105,
              116,
              104,
              32,
              82,
              84,
              88,
              32,
              103,
              114,
              97,
              112,
              104,
              105,
              99,
              115,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              76,
              65,
              80,
              84,
              79,
              80,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              50,
              57,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              103,
              97,
              109,
              105,
              110,
              103,
              45,
              108,
              97,
              112,
              116,
              111,
              112,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              48,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              49,
              52,
              54,
              54,
              53,
              48,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              49,
              53,
              50,
              51,
              54,
              55,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              97,
              109,
              105,
              110,
              103,
              32,
              77,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              71,
              66,
              32,
              103,
              97,
              109,
              105,
              110,
              103,
              32,
              109,
              111,
              117,
              115,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              104,
              105,
              103,
              104,
              32,
              68,
              80,
              73,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              77,
              79,
              85,
              83,
              69,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              55,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              103,
              97,
              109,
              105,
              110,
              103,
              45,
              109,
              111,
              117,
              115,
              101,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              50,
              53,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              48,
              51,
              52,
              55,
              51,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              49,
              55,
              52,
              51,
              51,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              32,
              75,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              71,
              66,
              32,
              109,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              32,
              107,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              98,
              108,
              117,
              101,
              32,
              115,
              119,
              105,
              116,
              99,
              104,
              101,
              115,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              75,
              69,
              89,
              66,
              79,
              65,
              82,
              68,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              109,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              45,
              107,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              53,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              51,
              56,
              50,
              56,
              56,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              52,
              50,
              50,
              53,
              57,
              93,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              97,
              98,
              108,
              101,
              34,
              58,
              123,
              34,
              112,
              97,
              103,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              48,
              44,
              34,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              115,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              117,
              110,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              111,
              102,
              102,
              115,
              101,
              116,
              34,
              58,
              48,
              44,
              34,
              112,
              97,
              103,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              117,
              110,
              112,
              97,
              103,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              51,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              108,
              97,
              115,
              116,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              48,
              44,
              34,
              115,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              117,
              110,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              110,
              117,
              109,
              98,
              101,
              114,
              79,
              102,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              51,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              53,
              53,
              52,
              48,
              50,
              53,
              52,
              50,
              49,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 1624
        },
        "id": "84a2004e-f4c5-4151-9491-f57a51fe0368",
        "assertions": [
          {
            "assertion": "Products retrieved successfully",
            "skipped": false
          },
          {
            "assertion": "Response has pagination structure",
            "skipped": false
          },
          {
            "assertion": "Store first product ID for testing",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bc461d2e-f72e-4bb0-a343-c86e1bbfeb44",
          "length": 41,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "24176ae1-cc79-4d23-8c18-01fe284d587c"
        },
        "item": {
          "id": "30debe7f-e3af-4eec-af69-d98b7f2f5edc",
          "name": "GET /products/{id} - Get Product Details",
          "request": {
            "url": {
              "path": [
                "api",
                "products",
                "{{product_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "017054a7-21ba-4b07-8542-1893fce1c2c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Product details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "pm.test('Product has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    const product = response.data;",
                  "    pm.expect(product).to.have.property('name');",
                  "    pm.expect(product).to.have.property('price');",
                  "    pm.expect(product).to.have.property('category');",
                  "});"
                ],
                "_lastExecutionId": "348ed9fa-cb27-4bfe-86e7-b8b5013d7d16"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "products",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "557698de-d572-4470-867b-335601a55178",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "362dbc9f-f0e6-4334-a347-8765fe63226d",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              117,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              58,
              32,
              78,
              111,
              32,
              115,
              116,
              97,
              116,
              105,
              99,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              97,
              112,
              105,
              47,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              46,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              53,
              56,
              50,
              52,
              54,
              56,
              48,
              56,
              52,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 146
        },
        "id": "30debe7f-e3af-4eec-af69-d98b7f2f5edc",
        "assertions": [
          {
            "assertion": "Product details retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Product details retrieved",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Product has required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Product has required fields",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "75135436-5baa-414c-9148-f5cf8c4f5810",
          "length": 41,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9ab77e95-ea25-4aac-9e37-2c6e6e527fe0"
        },
        "item": {
          "id": "126cd9fd-12af-40ca-ae11-87b102192762",
          "name": "GET /products/category/{categoryId} - Filter by Category ID",
          "request": {
            "url": {
              "path": [
                "api",
                "products",
                "category",
                "1"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b4601a4b-1034-4f1e-9f9f-cf18a82a9876",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Category filter works', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "aaee8c30-b0da-4030-ba85-6d35f12a1b3c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "products",
              "category",
              "1"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3453ffd7-4511-4665-897b-4a6c5f2e5ef2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a4ba719b-77af-4080-8a4c-c3a262d1822d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              97,
              109,
              105,
              110,
              103,
              32,
              76,
              97,
              112,
              116,
              111,
              112,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              105,
              103,
              104,
              45,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              32,
              103,
              97,
              109,
              105,
              110,
              103,
              32,
              108,
              97,
              112,
              116,
              111,
              112,
              32,
              119,
              105,
              116,
              104,
              32,
              82,
              84,
              88,
              32,
              103,
              114,
              97,
              112,
              104,
              105,
              99,
              115,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              76,
              65,
              80,
              84,
              79,
              80,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              50,
              57,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              103,
              97,
              109,
              105,
              110,
              103,
              45,
              108,
              97,
              112,
              116,
              111,
              112,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              48,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              49,
              52,
              54,
              54,
              53,
              48,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              49,
              53,
              50,
              51,
              54,
              55,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              97,
              109,
              105,
              110,
              103,
              32,
              77,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              71,
              66,
              32,
              103,
              97,
              109,
              105,
              110,
              103,
              32,
              109,
              111,
              117,
              115,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              104,
              105,
              103,
              104,
              32,
              68,
              80,
              73,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              77,
              79,
              85,
              83,
              69,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              55,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              103,
              97,
              109,
              105,
              110,
              103,
              45,
              109,
              111,
              117,
              115,
              101,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              50,
              53,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              48,
              51,
              52,
              55,
              51,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              49,
              55,
              52,
              51,
              51,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              32,
              75,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              71,
              66,
              32,
              109,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              32,
              107,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              98,
              108,
              117,
              101,
              32,
              115,
              119,
              105,
              116,
              99,
              104,
              101,
              115,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              75,
              69,
              89,
              66,
              79,
              65,
              82,
              68,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              109,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              45,
              107,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              53,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              51,
              56,
              50,
              56,
              56,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              52,
              50,
              50,
              53,
              57,
              93,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              97,
              98,
              108,
              101,
              34,
              58,
              123,
              34,
              112,
              97,
              103,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              48,
              44,
              34,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              115,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              117,
              110,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              111,
              102,
              102,
              115,
              101,
              116,
              34,
              58,
              48,
              44,
              34,
              112,
              97,
              103,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              117,
              110,
              112,
              97,
              103,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              51,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              108,
              97,
              115,
              116,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              48,
              44,
              34,
              115,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              117,
              110,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              110,
              117,
              109,
              98,
              101,
              114,
              79,
              102,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              51,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              32,
              98,
              121,
              32,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              54,
              48,
              56,
              55,
              51,
              57,
              51,
              55,
              50,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 1636
        },
        "id": "126cd9fd-12af-40ca-ae11-87b102192762",
        "assertions": [
          {
            "assertion": "Category filter works",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bd33f0dd-2e56-4832-ab6e-f48c838f0ea7",
          "length": 41,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c10946ac-c5ca-4f87-890b-d7a30a589fe0"
        },
        "item": {
          "id": "4fbe27e5-888b-45b8-9bac-48fa77aa7b27",
          "name": "GET /products/featured - Get Featured Products",
          "request": {
            "url": {
              "path": [
                "api",
                "products",
                "featured"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5ba74e9b-4193-448a-b287-8a8850be560a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Featured products retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "cd81334f-124b-4715-b8ea-05890326cbe1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "products",
              "featured"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "76b878e7-7ddf-4a7a-a2d2-bdfbf796bc94",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "14d75b9a-1bf0-4bb4-bebd-18ef4fbfeb71",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              97,
              109,
              105,
              110,
              103,
              32,
              76,
              97,
              112,
              116,
              111,
              112,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              105,
              103,
              104,
              45,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              32,
              103,
              97,
              109,
              105,
              110,
              103,
              32,
              108,
              97,
              112,
              116,
              111,
              112,
              32,
              119,
              105,
              116,
              104,
              32,
              82,
              84,
              88,
              32,
              103,
              114,
              97,
              112,
              104,
              105,
              99,
              115,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              76,
              65,
              80,
              84,
              79,
              80,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              50,
              57,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              103,
              97,
              109,
              105,
              110,
              103,
              45,
              108,
              97,
              112,
              116,
              111,
              112,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              48,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              49,
              52,
              54,
              54,
              53,
              48,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              49,
              53,
              50,
              51,
              54,
              55,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              32,
              75,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              71,
              66,
              32,
              109,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              32,
              107,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              98,
              108,
              117,
              101,
              32,
              115,
              119,
              105,
              116,
              99,
              104,
              101,
              115,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              75,
              69,
              89,
              66,
              79,
              65,
              82,
              68,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              52,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              109,
              101,
              99,
              104,
              97,
              110,
              105,
              99,
              97,
              108,
              45,
              107,
              101,
              121,
              98,
              111,
              97,
              114,
              100,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              53,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              51,
              56,
              50,
              56,
              56,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              50,
              52,
              50,
              50,
              53,
              57,
              93,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              97,
              98,
              108,
              101,
              34,
              58,
              123,
              34,
              112,
              97,
              103,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              48,
              44,
              34,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              115,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              117,
              110,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              111,
              102,
              102,
              115,
              101,
              116,
              34,
              58,
              48,
              44,
              34,
              112,
              97,
              103,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              117,
              110,
              112,
              97,
              103,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              50,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              108,
              97,
              115,
              116,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              110,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              48,
              44,
              34,
              115,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              117,
              110,
              115,
              111,
              114,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              110,
              117,
              109,
              98,
              101,
              114,
              79,
              102,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              50,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              101,
              109,
              112,
              116,
              121,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              32,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              54,
              51,
              48,
              56,
              57,
              51,
              54,
              50,
              49,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 1251
        },
        "id": "4fbe27e5-888b-45b8-9bac-48fa77aa7b27",
        "assertions": [
          {
            "assertion": "Featured products retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b200a2ad-740e-4b01-8eeb-27fed89a642b",
          "length": 41,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e1766d2b-e61f-4938-9e41-8b554f7756ab"
        },
        "item": {
          "id": "2e8c0aa5-84b2-4dff-8ab4-610b3715ae57",
          "name": "GET /products/slug/{slug} - Get Product by Slug",
          "request": {
            "url": {
              "path": [
                "api",
                "products",
                "slug",
                "gaming-laptop"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1c51764-e4e5-4da9-9f4a-2b58c7c7d490",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Product retrieved by slug', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "fd674ef4-a0a1-4db0-b451-062e88bbe882"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "products",
              "slug",
              "gaming-laptop"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b2f3ab6d-dce7-41bb-bc2b-ad62b9abc758",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "93575e05-4f5a-4aa1-90bb-edb081214ef2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              97,
              109,
              105,
              110,
              103,
              32,
              76,
              97,
              112,
              116,
              111,
              112,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              105,
              103,
              104,
              45,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              32,
              103,
              97,
              109,
              105,
              110,
              103,
              32,
              108,
              97,
              112,
              116,
              111,
              112,
              32,
              119,
              105,
              116,
              104,
              32,
              82,
              84,
              88,
              32,
              103,
              114,
              97,
              112,
              104,
              105,
              99,
              115,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              76,
              65,
              80,
              84,
              79,
              80,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              50,
              57,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              103,
              97,
              109,
              105,
              110,
              103,
              45,
              108,
              97,
              112,
              116,
              111,
              112,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              49,
              48,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              49,
              52,
              54,
              54,
              53,
              48,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              51,
              44,
              50,
              51,
              44,
              56,
              48,
              55,
              49,
              53,
              50,
              51,
              54,
              55,
              93,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              54,
              53,
              52,
              49,
              56,
              54,
              53,
              55,
              54,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 513
        },
        "id": "2e8c0aa5-84b2-4dff-8ab4-610b3715ae57",
        "assertions": [
          {
            "assertion": "Product retrieved by slug",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e196133b-b1ac-4490-84da-ff7850b0be3f",
          "length": 41,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5b57ae22-92b8-4f2d-a766-86ff96af6b4b"
        },
        "item": {
          "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
          "name": "GET /cart - Get Current Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Cart has required structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('userId');",
                  "    pm.expect(response.data).to.have.property('items');",
                  "});"
                ],
                "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "cart"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "048ffc14-d9fe-4b9d-b2c9-0da6b2c767c4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "11f5ef04-1ede-47b3-ab27-5ece27dad8ee",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
        "assertions": [
          {
            "assertion": "Cart retrieved successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cart retrieved successfully",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Cart has required structure",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Cart has required structure",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "50ad7a57-6196-4247-9e50-88784d1ae685",
          "length": 41,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c1ba90ad-83b4-404c-ad8c-6a8724c72df1"
        },
        "item": {
          "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
          "name": "POST /cart/items - Add Item to Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Item added to cart', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Store cart item ID', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.items && response.data.items.length > 0) {",
                  "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "cart",
              "items"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c3318287-c899-42cf-a122-64cd6b58aace",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "38",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"productId\": \"\",\n  \"quantity\": 2\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "217eb6f1-519e-4591-8f0f-a560a7ae4cf8",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 60
        },
        "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
        "assertions": [
          {
            "assertion": "Item added to cart",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Item added to cart",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Store cart item ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f836e423-0ca6-49e1-8d50-a899b0fe4196",
          "length": 41,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cd03b4e8-c54b-466a-bbe0-5e75fc67324c"
        },
        "item": {
          "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
          "name": "PUT /cart/items/{itemId} - Update Item Quantity",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "items",
                "{{cart_item_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 3\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart item updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "cart",
              "items",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3307bdb6-44cb-4a84-b36c-26bf981afd79",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "19",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"quantity\": 3\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "880707b6-1eb7-4f29-bdfc-ce3a7f31f17c",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 60
        },
        "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
        "assertions": [
          {
            "assertion": "Cart item updated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cart item updated",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6b22324f-a4b5-4cb6-b337-15633a46aedc",
          "length": 41,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "223c029f-8495-4216-87b2-111ea645824d"
        },
        "item": {
          "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
          "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "items",
                "{{cart_item_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart item removed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "cart",
              "items",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b690bb34-19cf-4e38-851b-f0efe84e25c2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2333bcda-295e-4736-b731-1724bf32265a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
        "assertions": [
          {
            "assertion": "Cart item removed",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cart item removed",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9641640d-e153-4d0d-9588-0abc040fa6c3",
          "length": 41,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "eb806816-579d-4e36-a32c-c5573f63cda9"
        },
        "item": {
          "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
          "name": "DELETE /cart - Clear Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "313e064a-d390-4815-8822-77db1f306544",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart cleared successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "cart"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cc56b7e7-cdea-49e1-b8da-acd8e4c623ad",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "99b5e110-94e8-499e-8e1d-5f47ebe969c7",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 60
        },
        "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
        "assertions": [
          {
            "assertion": "Cart cleared successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cart cleared successfully",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7763994a-55ca-4bbc-875f-a7088a058c59",
          "length": 41,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fb95021c-a5ec-4960-8c92-f8900ae1f067"
        },
        "item": {
          "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
          "name": "GET /cart/count - Get Cart Item Count",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "count"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart count retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "cart",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "29ce53c3-fe8d-46d1-9d87-7bf01eeb821d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b45eb6f1-4fc3-4ca5-ae12-0fd5061c430f",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
        "assertions": [
          {
            "assertion": "Cart count retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cart count retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f0499e75-b5a5-4cad-947f-6ba4c42d6a99",
          "length": 41,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c389f5e6-2a85-4b8f-877c-2c0e680f04c4"
        },
        "item": {
          "id": "f07b5440-c7c8-429d-b1be-a35618923389",
          "name": "POST /orders - Place Order",
          "request": {
            "url": {
              "path": [
                "api",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad37db6f-3435-4817-a044-c853fccad34d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order placed successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.globals.set('order_id', response.data.id);",
                  "});",
                  "",
                  "pm.test('Order has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('status');",
                  "    pm.expect(response.data).to.have.property('totalAmount');",
                  "});"
                ],
                "_lastExecutionId": "4fae0364-0783-448a-943d-6b8a621963aa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "orders"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c7338a6f-21ff-4c62-bbd4-8281b9d27826",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "146",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6432fc69-f9cd-46da-9cfd-0dc9cafabb15",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "f07b5440-c7c8-429d-b1be-a35618923389",
        "assertions": [
          {
            "assertion": "Order placed successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Order placed successfully",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Order has required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Order has required fields",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "12e9a271-b427-451c-ad58-d7f0fa144ab8",
          "length": 41,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "74d75d0b-4188-4786-9a04-f6dbdd05b2d6"
        },
        "item": {
          "id": "1c6c5b6b-dbd4-4537-a664-f80560adda5d",
          "name": "GET /orders - View Order History",
          "request": {
            "url": {
              "path": [
                "api",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35eb17d9-eb0e-459c-9722-9fee074d8943",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "c599b18e-ae2e-4f75-9f56-1414b0ad7743"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "orders"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "97bd1a4a-714d-43ff-90e3-6377a1aaf8ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8fc9af2b-3715-4ad2-b304-780c2111e320",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "1c6c5b6b-dbd4-4537-a664-f80560adda5d",
        "assertions": [
          {
            "assertion": "Order history retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Order history retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2b703078-9e91-4283-8fc8-0bc364951152",
          "length": 41,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c8813f6c-01a3-47ac-b6e1-b430d0f99367"
        },
        "item": {
          "id": "2e18ab89-ddd5-42b3-8266-bad7243c10f1",
          "name": "GET /orders/{id} - View Order Details",
          "request": {
            "url": {
              "path": [
                "api",
                "orders",
                "{{order_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dae04371-5f74-4a8f-87a9-5afc151eeb08",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data.id).to.equal(pm.globals.get('order_id'));",
                  "});"
                ],
                "_lastExecutionId": "b24dcf4b-ef4b-402e-b306-d4661104a54a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "orders",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8c46f1bb-f2e7-4cd7-8219-32195ecd9add",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d1193233-7705-4a61-9d78-6311565af63f",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 60
        },
        "id": "2e18ab89-ddd5-42b3-8266-bad7243c10f1",
        "assertions": [
          {
            "assertion": "Order details retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Order details retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "151ab13f-9e61-4105-a6c4-a97a63af5056",
          "length": 41,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "09058d12-8bfa-47a1-a378-db3bde7173eb"
        },
        "item": {
          "id": "b180a27a-60c1-4892-b255-7475d03605d1",
          "name": "POST /payments/process - Process Payment",
          "request": {
            "url": {
              "path": [
                "api",
                "payments",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": {{order_id}},\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment processed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.globals.set('payment_id', response.data.id);",
                  "});",
                  "",
                  "pm.test('Payment has transaction ID', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('transactionId');",
                  "    pm.expect(response.data).to.have.property('status');",
                  "});"
                ],
                "_lastExecutionId": "0b4a1d14-0992-4878-9525-664a9d86377b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "payments",
              "process"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ec93f41-9eca-4a30-a801-b10541da18a8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "156",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"orderId\": ,\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2a77db5c-1f70-4d19-add9-591128617a5a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 60
        },
        "id": "b180a27a-60c1-4892-b255-7475d03605d1",
        "assertions": [
          {
            "assertion": "Payment processed successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Payment processed successfully",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Payment has transaction ID",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Payment has transaction ID",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c8fe54b0-8d8d-4187-840f-4f1f57913ce6",
          "length": 41,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "66f86d1f-6e9b-45de-9503-fe1162ceb25b"
        },
        "item": {
          "id": "3dacbb33-4452-4eea-87bb-3b31ef9ef10e",
          "name": "GET /payments/{id} - View Payment Info",
          "request": {
            "url": {
              "path": [
                "api",
                "payments",
                "{{payment_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e582258a-0ea4-4d01-9c29-4ade8d6a4210",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data.id).to.equal(pm.globals.get('payment_id'));",
                  "});"
                ],
                "_lastExecutionId": "b1c765b2-0d9d-4c72-9192-aff52432836a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "payments",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bc3a7505-d525-419a-a828-466681925d01",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b6eb14d4-0de5-4187-812f-26944605f4b5",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "3dacbb33-4452-4eea-87bb-3b31ef9ef10e",
        "assertions": [
          {
            "assertion": "Payment details retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Payment details retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4262ac2f-c1c6-4327-adc2-a3302785eb47",
          "length": 41,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8b680425-a632-41d4-a5e9-bfd79fbddf55"
        },
        "item": {
          "id": "c38a2dd0-8cd7-4a6f-a72b-a068e500e341",
          "name": "GET /users/profile - Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "profile"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b241b30d-1b88-436e-8fa1-eb19e8beca9a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "9c462a38-d8ea-43dd-8ac6-8e025e844a03"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "users",
              "profile"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ffcf33ad-7e2b-45d5-983b-3ed09eaed44c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2d8eabb0-252c-4def-9fad-4d976a5661f1",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "c38a2dd0-8cd7-4a6f-a72b-a068e500e341",
        "assertions": [
          {
            "assertion": "User profile retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User profile retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6cbb9776-e454-42e6-bd87-2d948a971e79",
          "length": 41,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9847fe78-e6e2-456f-a309-61071b65d01b"
        },
        "item": {
          "id": "6a591117-672a-44e5-bf5d-27bfe632c67d",
          "name": "GET /users/{id} - Get User by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9303e445-cd5e-4634-82a8-2a6bc8c54a4f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User retrieved by ID', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "f9a88cf1-d9ce-4b56-ae05-1aad96f25a68"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "users",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f29848fc-ffcf-40d2-bb08-8ac5c9b6c565",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "56ef5b66-1676-4527-95b0-b8c6ca46c545",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "6a591117-672a-44e5-bf5d-27bfe632c67d",
        "assertions": [
          {
            "assertion": "User retrieved by ID",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User retrieved by ID",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "52dcf6ae-4811-4120-a7f2-225a41ebcd83",
          "length": 41,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "04b24ae9-f740-4ae3-861e-3725240665a6"
        },
        "item": {
          "id": "8a450da8-5f8e-4202-b320-63049eac50e8",
          "name": "PUT /users/profile - Update Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "profile"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"phone\": \"+1234567891\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5650bd40-9978-4f15-9a71-f0f08dc1cbf9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "23083286-9110-4bb2-a568-413857f6618d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "users",
              "profile"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0aad3fd1-07f1-4947-ae82-f4bbc7c5ae57",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "88",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"phone\": \"+1234567891\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b397d2ee-4c0d-4aa9-80fe-736014fb2c3f",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 60
        },
        "id": "8a450da8-5f8e-4202-b320-63049eac50e8",
        "assertions": [
          {
            "assertion": "User profile updated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "User profile updated",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c1140bbb-5386-4d37-8677-4411a4c55ddb",
          "length": 41,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d595458f-15f4-427b-9237-d30c3b6b8492"
        },
        "item": {
          "id": "e156509b-558c-47d0-b647-94698aed65c6",
          "name": "GET /search/products - Search Products",
          "request": {
            "url": {
              "path": [
                "api",
                "search",
                "products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "laptop"
                },
                {
                  "key": "category",
                  "value": "electronics"
                },
                {
                  "key": "minPrice",
                  "value": "500"
                },
                {
                  "key": "maxPrice",
                  "value": "2000"
                },
                {
                  "key": "sortBy",
                  "value": "price"
                },
                {
                  "key": "sortDirection",
                  "value": "asc"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1212ca2-bae5-4c4c-8377-33a0ae5cd4d5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Search results retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('products');",
                  "    pm.expect(response.data).to.have.property('totalElements');",
                  "});"
                ],
                "_lastExecutionId": "8eaef3f9-5dff-4089-ae5c-efaf77d4b869"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "search",
              "products"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "query",
                "value": "laptop"
              },
              {
                "key": "category",
                "value": "electronics"
              },
              {
                "key": "minPrice",
                "value": "500"
              },
              {
                "key": "maxPrice",
                "value": "2000"
              },
              {
                "key": "sortBy",
                "value": "price"
              },
              {
                "key": "sortDirection",
                "value": "asc"
              },
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44b9d374-0d75-4740-b084-5b77ac56dda4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6255f622-9cea-41f5-8667-358763be2529",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              97,
              109,
              105,
              110,
              103,
              32,
              76,
              97,
              112,
              116,
              111,
              112,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              72,
              105,
              103,
              104,
              45,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              32,
              103,
              97,
              109,
              105,
              110,
              103,
              32,
              108,
              97,
              112,
              116,
              111,
              112,
              32,
              119,
              105,
              116,
              104,
              32,
              82,
              84,
              88,
              32,
              103,
              114,
              97,
              112,
              104,
              105,
              99,
              115,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              76,
              65,
              80,
              84,
              79,
              80,
              45,
              48,
              48,
              49,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              50,
              57,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              69,
              108,
              101,
              99,
              116,
              114,
              111,
              110,
              105,
              99,
              115,
              34,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              103,
              97,
              109,
              105,
              110,
              103,
              45,
              108,
              97,
              112,
              116,
              111,
              112,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              32,
              76,
              97,
              112,
              116,
              111,
              112,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              114,
              111,
              102,
              101,
              115,
              115,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              112,
              116,
              111,
              112,
              32,
              102,
              111,
              114,
              32,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              32,
              117,
              115,
              101,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              76,
              65,
              80,
              84,
              79,
              80,
              45,
              48,
              48,
              50,
              34,
              44,
              34,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              56,
              57,
              57,
              46,
              57,
              57,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              69,
              108,
              101,
              99,
              116,
              114,
              111,
              110,
              105,
              99,
              115,
              34,
              44,
              34,
              105,
              110,
              83,
              116,
              111,
              99,
              107,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              105,
              115,
              99,
              111,
              117,
              110,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              45,
              108,
              97,
              112,
              116,
              111,
              112,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              81,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              69,
              108,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              58,
              50,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              80,
              97,
              103,
              101,
              34,
              58,
              48,
              44,
              34,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              113,
              117,
              101,
              114,
              121,
              34,
              58,
              34,
              108,
              97,
              112,
              116,
              111,
              112,
              34,
              44,
              34,
              115,
              101,
              97,
              114,
              99,
              104,
              84,
              105,
              109,
              101,
              34,
              58,
              48,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              115,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              57,
              52,
              53,
              52,
              52,
              48,
              53,
              50,
              51,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 954
        },
        "id": "e156509b-558c-47d0-b647-94698aed65c6",
        "assertions": [
          {
            "assertion": "Search results retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "aa82c126-7caa-46d2-b8cd-f80eb89a8e1e",
          "length": 41,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ce300c4e-18bc-4787-92f8-ad11123f1416"
        },
        "item": {
          "id": "0a33d1cc-ba94-4986-a6b6-99e3116f6227",
          "name": "GET /search/recommendations - Get Recommendations",
          "request": {
            "url": {
              "path": [
                "api",
                "search",
                "recommendations"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3836f8ba-4880-47d2-a136-5fd12afe27e6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recommendations retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "a5b3f87a-a881-4cf8-aa82-d9998c517bff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "search",
              "recommendations"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d65e8836-c57b-4ee9-b356-c74befb44295",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "f98b0a99-accd-4ccf-b670-dafe98c7471b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              100,
              34,
              58,
              49,
              48,
              49,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              49,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              116,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              49,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              57,
              57,
              46,
              57,
              57,
              44,
              34,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              84,
              82,
              69,
              78,
              68,
              73,
              78,
              71,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              56,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              110,
              111,
              119,
              34,
              125,
              44,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              100,
              34,
              58,
              49,
              48,
              50,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              50,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              116,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              50,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              49,
              57,
              46,
              57,
              57,
              44,
              34,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              84,
              82,
              69,
              78,
              68,
              73,
              78,
              71,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              56,
              53,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              110,
              111,
              119,
              34,
              125,
              44,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              100,
              34,
              58,
              49,
              48,
              51,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              51,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              116,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              51,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              51,
              57,
              46,
              57,
              57,
              44,
              34,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              84,
              82,
              69,
              78,
              68,
              73,
              78,
              71,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              55,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              110,
              111,
              119,
              34,
              125,
              44,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              100,
              34,
              58,
              49,
              48,
              52,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              52,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              116,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              52,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              53,
              57,
              46,
              57,
              57,
              44,
              34,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              84,
              82,
              69,
              78,
              68,
              73,
              78,
              71,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              55,
              53,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              110,
              111,
              119,
              34,
              125,
              44,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              100,
              34,
              58,
              49,
              48,
              53,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              53,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              116,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              53,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              55,
              57,
              46,
              57,
              57,
              44,
              34,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              84,
              82,
              69,
              78,
              68,
              73,
              78,
              71,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              55,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              110,
              111,
              119,
              34,
              125,
              44,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              100,
              34,
              58,
              49,
              48,
              54,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              54,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              116,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              54,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              57,
              57,
              46,
              57,
              57,
              44,
              34,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              84,
              82,
              69,
              78,
              68,
              73,
              78,
              71,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              54,
              52,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              110,
              111,
              119,
              34,
              125,
              44,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              100,
              34,
              58,
              49,
              48,
              55,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              55,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              116,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              55,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              49,
              57,
              46,
              57,
              57,
              44,
              34,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              84,
              82,
              69,
              78,
              68,
              73,
              78,
              71,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              53,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              110,
              111,
              119,
              34,
              125,
              44,
              123,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              100,
              34,
              58,
              49,
              48,
              56,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              56,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              47,
              105,
              109,
              97,
              103,
              101,
              115,
              47,
              116,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              56,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              50,
              51,
              57,
              46,
              57,
              57,
              44,
              34,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              84,
              82,
              69,
              78,
              68,
              73,
              78,
              71,
              34,
              44,
              34,
              115,
              99,
              111,
              114,
              101,
              34,
              58,
              48,
              46,
              53,
              52,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              57,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              110,
              111,
              119,
              34,
              125,
              93,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              114,
              101,
              99,
              111,
              109,
              109,
              101,
              110,
              100,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              57,
              54,
              53,
              50,
              55,
              53,
              54,
              49,
              52,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 1683
        },
        "id": "0a33d1cc-ba94-4986-a6b6-99e3116f6227",
        "assertions": [
          {
            "assertion": "Recommendations retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7a38028b-4893-429e-8ea0-760930bbc740",
          "length": 41,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "089307bc-6aef-4f42-bd77-643b4d1774d1"
        },
        "item": {
          "id": "5e4a391d-44ce-4610-9cdd-d0463828c8a2",
          "name": "GET /search/suggestions - Get Search Suggestions",
          "request": {
            "url": {
              "path": [
                "api",
                "search",
                "suggestions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "lap"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4d826dc-8ac1-4d13-b51d-7e2b973c9521",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Search suggestions retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "b21e34c6-4973-44dd-b7b7-298f18e79d20"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "search",
              "suggestions"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "query",
                "value": "lap"
              },
              {
                "key": "limit",
                "value": "5"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4979996e-b05e-4148-94ff-79b595b209d6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "94532b8b-e185-4c1a-b88d-2236d1844686",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:13 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              115,
              117,
              103,
              103,
              101,
              115,
              116,
              105,
              111,
              110,
              115,
              32,
              114,
              101,
              116,
              114,
              105,
              101,
              118,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              51,
              44,
              57,
              56,
              54,
              50,
              48,
              57,
              53,
              50,
              54,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 124
        },
        "id": "5e4a391d-44ce-4610-9cdd-d0463828c8a2",
        "assertions": [
          {
            "assertion": "Search suggestions retrieved",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f1fb255d-95de-4b64-b984-59d55afe6577",
          "length": 41,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9861cf57-43ec-43c1-a2d6-ad89a63b9a47"
        },
        "item": {
          "id": "82d8f5ae-fc3f-4b20-95bb-2b487cc67ff6",
          "name": "POST /checkout - Complete Checkout",
          "request": {
            "url": {
              "path": [
                "api",
                "checkout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b738a1f-b741-4d6c-ab91-8bf9647fd0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Checkout completed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('orderId');",
                  "    pm.expect(response.data).to.have.property('paymentId');",
                  "    pm.globals.set('order_id', response.data.orderId);",
                  "    pm.globals.set('payment_id', response.data.paymentId);",
                  "});"
                ],
                "_lastExecutionId": "be727c68-2b26-4635-afab-a1e2bf62794e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "checkout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bb054063-7f9d-45b0-a21b-21571a22a39f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "388",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "776776d4-ee1e-4578-aa81-e5860748b368",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "82d8f5ae-fc3f-4b20-95bb-2b487cc67ff6",
        "assertions": [
          {
            "assertion": "Checkout completed successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Checkout completed successfully",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b22128e6-0c63-42e5-bd4f-f8c594ac7c1e",
          "length": 41,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7b2a32b5-cf15-481d-b3b2-4a95f9595b1f"
        },
        "item": {
          "id": "32aef58b-ddf2-43bc-8c31-d09ff64adebb",
          "name": "POST /analytics/track - Track Event",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "track"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventType\": \"PRODUCT_VIEW\",\n  \"productId\": {{product_id}},\n  \"category\": \"electronics\",\n  \"page\": \"/products/gaming-laptop\",\n  \"referrer\": \"/search\",\n  \"metadata\": {\n    \"source\": \"search\",\n    \"position\": 1,\n    \"search_query\": \"gaming laptop\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ccb547d1-6ec9-473f-aa85-cefe64c7b4f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Event tracked successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "});"
                ],
                "_lastExecutionId": "f8f632d8-4eb2-4fae-bbe2-a608ede78830"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "analytics",
              "track"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b8ffed13-4860-4879-8baf-d188b8b1ed47",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "241",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"eventType\": \"PRODUCT_VIEW\",\n  \"productId\": ,\n  \"category\": \"electronics\",\n  \"page\": \"/products/gaming-laptop\",\n  \"referrer\": \"/search\",\n  \"metadata\": {\n    \"source\": \"search\",\n    \"position\": 1,\n    \"search_query\": \"gaming laptop\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5f950c8c-c69a-408c-9a16-2169470f425e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 60
        },
        "id": "32aef58b-ddf2-43bc-8c31-d09ff64adebb",
        "assertions": [
          {
            "assertion": "Event tracked successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Event tracked successfully",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8ef78163-0155-47c1-869f-7ff78408ce2b",
          "length": 41,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2e6b1260-cbc5-408b-bb51-b05819b03221"
        },
        "item": {
          "id": "bf893da4-40c1-4b74-b71f-36ef7854e1fe",
          "name": "GET /analytics/admin/dashboard - Admin Dashboard (Admin Only)",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "admin",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-01-31"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "58577893-9043-461d-8920-1aa6b01fb847",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Admin dashboard retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('totalRevenue');",
                  "    pm.expect(response.data).to.have.property('totalOrders');",
                  "});"
                ],
                "_lastExecutionId": "9c131c21-51e9-4a64-9104-0130cb2d586c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "analytics",
              "admin",
              "dashboard"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "startDate",
                "value": "2025-01-01"
              },
              {
                "key": "endDate",
                "value": "2025-01-31"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3b174723-84c9-4710-88c4-ff305a4712b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "72343984-c8a4-40c6-a64c-a3b7cec9702f",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "bf893da4-40c1-4b74-b71f-36ef7854e1fe",
        "assertions": [
          {
            "assertion": "Admin dashboard retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Admin dashboard retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "daca239e-0d39-4b5c-b222-dee1ba4740b1",
          "length": 41,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57c28630-18b4-43eb-ba1b-7ab96d16d4d8"
        },
        "item": {
          "id": "a7e5e990-8dab-4d41-83dd-1f59a95bd9b1",
          "name": "GET /notifications - Get User Notifications",
          "request": {
            "url": {
              "path": [
                "api",
                "notifications"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                },
                {
                  "key": "unreadOnly",
                  "value": "false"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a05abbb-6458-4617-81f5-77b292109435",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Notifications retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "26f713d6-3009-424f-8cb4-6df73fa492f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "notifications"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "page",
                "value": "0"
              },
              {
                "key": "size",
                "value": "20"
              },
              {
                "key": "unreadOnly",
                "value": "false"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bba485b4-329b-4374-b5e7-4805a31eb75e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c2207619-64e6-4e9f-b49d-a6529988e447",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "a7e5e990-8dab-4d41-83dd-1f59a95bd9b1",
        "assertions": [
          {
            "assertion": "Notifications retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Notifications retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8009c28f-8669-43a9-bd5b-6c93c2014ebf",
          "length": 41,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "29981d45-b9a8-47ef-8796-f20138ae6168"
        },
        "item": {
          "id": "5892477b-d9c0-428a-9b8e-06ea561f838f",
          "name": "GET /notifications/unread/count - Get Unread Count",
          "request": {
            "url": {
              "path": [
                "api",
                "notifications",
                "unread",
                "count"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db942fe2-a7b9-4482-8d1b-055e911382ed",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unread count retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "a1b6b667-2fc5-4dfa-9513-b66fb26aedc1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "notifications",
              "unread",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ab04abc0-1661-49c1-ab93-281e109b6d08",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "528462c3-ff73-4091-9437-cd5482875bc7",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 60
        },
        "id": "5892477b-d9c0-428a-9b8e-06ea561f838f",
        "assertions": [
          {
            "assertion": "Unread count retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Unread count retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9cda2c5a-570e-4910-ac63-e53092035206",
          "length": 41,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e43fb7dc-b5f2-4b26-b310-012b4946ccc5"
        },
        "item": {
          "id": "80892317-f498-490b-882f-528f539d1583",
          "name": "PUT /notifications/{id}/read - Mark as Read",
          "request": {
            "url": {
              "path": [
                "api",
                "notifications",
                "1",
                "read"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fb9fd3ae-f95f-4673-af3e-cd9140ef2504",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Notification marked as read', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "582fbea4-7960-49a9-971b-1d0306b632be"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "notifications",
              "1",
              "read"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f8b72af8-48e5-45a2-ba79-d91ed6294f05",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "PUT",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4b21bc08-5875-49a2-bfa8-60cee4d57b74",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "80892317-f498-490b-882f-528f539d1583",
        "assertions": [
          {
            "assertion": "Notification marked as read",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Notification marked as read",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6d6883ad-72e3-4ce3-ab32-33a6b2652bb6",
          "length": 41,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "37f1c4c8-912f-4358-9870-bf90d5b3cf31"
        },
        "item": {
          "id": "2a6ed5ee-5820-4ce0-9cca-0258cce505d4",
          "name": "GET /products/999999 - Invalid Product ID",
          "request": {
            "url": {
              "path": [
                "api",
                "products",
                "999999"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "838f29e2-79a3-43e7-85ac-32333f9c336c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid product ID returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "37544f47-ac20-4aad-a7bd-603bdf043e77"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "products",
              "999999"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d7130139-5d46-430c-8926-476ed313865a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "42922c88-bb28-472f-a45c-bf3b06dff064",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              52,
              44,
              49,
              50,
              52,
              53,
              56,
              54,
              52,
              49,
              53,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 101
        },
        "id": "2a6ed5ee-5820-4ce0-9cca-0258cce505d4",
        "assertions": [
          {
            "assertion": "Invalid product ID returns 404",
            "skipped": false
          },
          {
            "assertion": "Error response has proper structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c7d63b22-38c7-425e-96c3-1b73a1972438",
          "length": 41,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "73437915-c017-4732-aa65-132d4caa9093"
        },
        "item": {
          "id": "2bbfb074-24e6-485b-952c-f112e93c149f",
          "name": "GET /cart - Unauthorized Access",
          "request": {
            "url": {
              "path": [
                "api",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3a7ac1b-227b-4c00-af7d-e184f0cdc26e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unauthorized access returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "_lastExecutionId": "685448b8-aeaf-469a-bb79-8690d049daa8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "cart"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1edda580-23bc-4f8a-a6c0-9734f74c5d1c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a9ffb9df-396c-4467-ba89-89b7c68a6724",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 60
        },
        "id": "2bbfb074-24e6-485b-952c-f112e93c149f",
        "assertions": [
          {
            "assertion": "Unauthorized access returns 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1bad9545-ad46-4f6b-b844-f9ca296b73a6",
          "length": 41,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "13f99d2c-7fe3-4f4a-a11e-655914f347d4"
        },
        "item": {
          "id": "f843f282-b898-40ea-8371-a6f17e44110e",
          "name": "POST /auth/login - Invalid Credentials",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eebe0d34-cc78-44ac-8193-dbcbae8127f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid credentials return proper error', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is helpful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.be.a('string');",
                  "});"
                ],
                "_lastExecutionId": "53480ac7-fe2e-4431-988f-3791e4b93e4c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f345c7bb-b313-403e-8d57-178539d8a4ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "67",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "208db19b-5d78-4fc7-af4d-9c3fef10e3ed",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              52,
              44,
              49,
              54,
              52,
              49,
              55,
              48,
              54,
              56,
              53,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 103
        },
        "id": "f843f282-b898-40ea-8371-a6f17e44110e",
        "assertions": [
          {
            "assertion": "Invalid credentials return proper error",
            "skipped": false
          },
          {
            "assertion": "Error message is helpful",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "15518a77-ecad-4826-9325-0b8c1defde2b",
          "length": 41,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "eb965366-7ccf-44b9-aeb8-5da48a0bd1a2"
        },
        "item": {
          "id": "2c2990bb-1f83-4fbc-9a36-62812ef2fea0",
          "name": "POST /auth/register - Duplicate Email",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "register"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"{{test_email}}\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b7a60c27-afd0-4c62-938b-561fd7304ea2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Duplicate email returns error', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates duplicate email', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "e0d06d03-3581-4d2d-89b9-af9e040cc161"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "register"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1fe4b66-9939-4386-a502-f3eed9e965f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8feaaeaf-a4f4-472c-ad33-f8961a04f510",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Connection",
              "value": "close"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              105,
              108,
              101,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              91,
              50,
              48,
              50,
              53,
              44,
              55,
              44,
              50,
              56,
              44,
              49,
              53,
              44,
              52,
              44,
              49,
              52,
              44,
              49,
              56,
              53,
              49,
              54,
              49,
              52,
              48,
              54,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 126
        },
        "id": "2c2990bb-1f83-4fbc-9a36-62812ef2fea0",
        "assertions": [
          {
            "assertion": "Duplicate email returns error",
            "skipped": false
          },
          {
            "assertion": "Error indicates duplicate email",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "46abc022-48d7-421d-8fc9-183f0e1ee3c3",
          "length": 41,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2fc74fad-8d64-409f-ae42-e3b9ab58e0ff"
        },
        "item": {
          "id": "a8433dbb-533a-4896-ad7f-ccbb4497e8b5",
          "name": "POST /cart/items - Add Invalid Product",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": 999999,\n  \"quantity\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5cf4697-9691-4345-a352-66bd62cd2dbd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid product ID returns error', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "c4e8d648-686d-4d5c-9e73-7c8d12f4f927"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "cart",
              "items"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "07f303ea-00ac-4b6e-9bb1-39ab711b4bf6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "42",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"productId\": 999999,\n  \"quantity\": 1\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8bdde445-f1ea-470a-9d77-a34a2c4ea188",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "a8433dbb-533a-4896-ad7f-ccbb4497e8b5",
        "assertions": [
          {
            "assertion": "Invalid product ID returns error",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Invalid product ID returns error",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "Error response has proper structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f873d769-1759-4f47-b942-d23af433d7b2",
          "length": 41,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4f32081f-4f1b-4cb0-a43f-dd19af921301"
        },
        "item": {
          "id": "87f075ae-9964-4785-81a1-78420e8d3e78",
          "name": "POST /orders - Create Order with Empty Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7bf42d2-09a3-4bb0-8b1c-05b7ea35b660",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Empty cart returns error', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates empty cart', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "73391129-b5d6-4c54-8b4b-ef3eb926966b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "orders"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "46e05dbd-641d-4c4a-8f83-c3a283928684",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "289",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1286b32b-38b8-4572-81f0-a922c300f1da",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Vary",
              "value": "Origin"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Method"
            },
            {
              "key": "Vary",
              "value": "Access-Control-Request-Headers"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "0"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=ISO-8859-1"
            },
            {
              "key": "Content-Length",
              "value": "60"
            },
            {
              "key": "Date",
              "value": "Mon, 28 Jul 2025 09:04:14 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 60
        },
        "id": "87f075ae-9964-4785-81a1-78420e8d3e78",
        "assertions": [
          {
            "assertion": "Empty cart returns error",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Empty cart returns error",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "Error message indicates empty cart",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 10962
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Login successful",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "2cabe7a1123756eaeb48a4efa4a696f2",
          "id": "4bd3417c-5d73-443c-8197-b9b92f13d9ff",
          "timestamp": 1753693453508,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
          "name": "POST /auth/login - User Authentication",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('accessToken');",
                  "    pm.expect(response.data).to.have.property('tokenType');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.globals.set('auth_token', response.data.accessToken);",
                  "});",
                  "",
                  "pm.test('JWT token structure is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const token = response.data.accessToken;",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                  "});",
                  "",
                  "pm.test('Token type is Bearer', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                  "});"
                ],
                "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
              }
            }
          ]
        },
        "parent": {
          "id": "2f09e56f-8fc2-43da-a1f7-54b4a07330f3",
          "name": "üîê Auth Domain",
          "item": [
            {
              "id": "80d010c6-8dd1-4af8-8079-04e231151a72",
              "name": "POST /auth/register - User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e774e70c-f5ed-4e88-b2d3-8a38946f8950",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('email');",
                      "    pm.globals.set('user_id', response.data.id);",
                      "    pm.globals.set('test_email', JSON.parse(pm.request.body.raw).email);",
                      "    pm.globals.set('test_password', JSON.parse(pm.request.body.raw).password);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('firstName');",
                      "    pm.expect(response.data).to.have.property('lastName');",
                      "    pm.expect(response.data).to.have.property('active');",
                      "});"
                    ],
                    "_lastExecutionId": "7095b881-7329-4d64-9b47-501b66e5d38c"
                  }
                }
              ]
            },
            {
              "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
              "name": "POST /auth/login - User Authentication",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('accessToken');",
                      "    pm.expect(response.data).to.have.property('tokenType');",
                      "    pm.expect(response.data).to.have.property('user');",
                      "    pm.globals.set('auth_token', response.data.accessToken);",
                      "});",
                      "",
                      "pm.test('JWT token structure is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const token = response.data.accessToken;",
                      "    pm.expect(token).to.be.a('string');",
                      "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                      "});",
                      "",
                      "pm.test('Token type is Bearer', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                      "});"
                    ],
                    "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
                  }
                }
              ]
            },
            {
              "id": "8b3ae270-3b69-4e5a-b2fd-af2b9a815423",
              "name": "POST /auth/logout - User Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c70d417-7eb9-401d-a32d-b90270c1454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5980e873-bc8d-4fda-9173-fb14bbe77ad9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b5571edf-56c7-4912-b1a7-e9ab7261ba71",
          "length": 41,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4639677f-dd4d-4a8b-a93e-79752ca924f0",
          "scriptId": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
          "execution": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "JWT token structure is valid",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "5e9205f4e162e1b1adf80838f94594c7",
          "id": "9059b451-571a-4589-87e1-ff1d151b77d6",
          "timestamp": 1753693453511,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
          "name": "POST /auth/login - User Authentication",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('accessToken');",
                  "    pm.expect(response.data).to.have.property('tokenType');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.globals.set('auth_token', response.data.accessToken);",
                  "});",
                  "",
                  "pm.test('JWT token structure is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const token = response.data.accessToken;",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                  "});",
                  "",
                  "pm.test('Token type is Bearer', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                  "});"
                ],
                "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
              }
            }
          ]
        },
        "parent": {
          "id": "2f09e56f-8fc2-43da-a1f7-54b4a07330f3",
          "name": "üîê Auth Domain",
          "item": [
            {
              "id": "80d010c6-8dd1-4af8-8079-04e231151a72",
              "name": "POST /auth/register - User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e774e70c-f5ed-4e88-b2d3-8a38946f8950",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('email');",
                      "    pm.globals.set('user_id', response.data.id);",
                      "    pm.globals.set('test_email', JSON.parse(pm.request.body.raw).email);",
                      "    pm.globals.set('test_password', JSON.parse(pm.request.body.raw).password);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('firstName');",
                      "    pm.expect(response.data).to.have.property('lastName');",
                      "    pm.expect(response.data).to.have.property('active');",
                      "});"
                    ],
                    "_lastExecutionId": "7095b881-7329-4d64-9b47-501b66e5d38c"
                  }
                }
              ]
            },
            {
              "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
              "name": "POST /auth/login - User Authentication",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('accessToken');",
                      "    pm.expect(response.data).to.have.property('tokenType');",
                      "    pm.expect(response.data).to.have.property('user');",
                      "    pm.globals.set('auth_token', response.data.accessToken);",
                      "});",
                      "",
                      "pm.test('JWT token structure is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const token = response.data.accessToken;",
                      "    pm.expect(token).to.be.a('string');",
                      "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                      "});",
                      "",
                      "pm.test('Token type is Bearer', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                      "});"
                    ],
                    "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
                  }
                }
              ]
            },
            {
              "id": "8b3ae270-3b69-4e5a-b2fd-af2b9a815423",
              "name": "POST /auth/logout - User Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c70d417-7eb9-401d-a32d-b90270c1454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5980e873-bc8d-4fda-9173-fb14bbe77ad9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b5571edf-56c7-4912-b1a7-e9ab7261ba71",
          "length": 41,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4639677f-dd4d-4a8b-a93e-79752ca924f0",
          "scriptId": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
          "execution": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Token type is Bearer",
          "message": "expected undefined to equal 'Bearer'",
          "stack": "AssertionError: expected undefined to equal 'Bearer'\n   at Object.eval sandbox-script.js:3:6)",
          "checksum": "31e281c34ddf524cccde259e1ac63a59",
          "id": "af40f7a4-e821-4d57-9bc2-439c8433b977",
          "timestamp": 1753693453513,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
          "name": "POST /auth/login - User Authentication",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('accessToken');",
                  "    pm.expect(response.data).to.have.property('tokenType');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    pm.globals.set('auth_token', response.data.accessToken);",
                  "});",
                  "",
                  "pm.test('JWT token structure is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const token = response.data.accessToken;",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                  "});",
                  "",
                  "pm.test('Token type is Bearer', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                  "});"
                ],
                "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
              }
            }
          ]
        },
        "parent": {
          "id": "2f09e56f-8fc2-43da-a1f7-54b4a07330f3",
          "name": "üîê Auth Domain",
          "item": [
            {
              "id": "80d010c6-8dd1-4af8-8079-04e231151a72",
              "name": "POST /auth/register - User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e774e70c-f5ed-4e88-b2d3-8a38946f8950",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('email');",
                      "    pm.globals.set('user_id', response.data.id);",
                      "    pm.globals.set('test_email', JSON.parse(pm.request.body.raw).email);",
                      "    pm.globals.set('test_password', JSON.parse(pm.request.body.raw).password);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('firstName');",
                      "    pm.expect(response.data).to.have.property('lastName');",
                      "    pm.expect(response.data).to.have.property('active');",
                      "});"
                    ],
                    "_lastExecutionId": "7095b881-7329-4d64-9b47-501b66e5d38c"
                  }
                }
              ]
            },
            {
              "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
              "name": "POST /auth/login - User Authentication",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('accessToken');",
                      "    pm.expect(response.data).to.have.property('tokenType');",
                      "    pm.expect(response.data).to.have.property('user');",
                      "    pm.globals.set('auth_token', response.data.accessToken);",
                      "});",
                      "",
                      "pm.test('JWT token structure is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const token = response.data.accessToken;",
                      "    pm.expect(token).to.be.a('string');",
                      "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                      "});",
                      "",
                      "pm.test('Token type is Bearer', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                      "});"
                    ],
                    "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
                  }
                }
              ]
            },
            {
              "id": "8b3ae270-3b69-4e5a-b2fd-af2b9a815423",
              "name": "POST /auth/logout - User Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c70d417-7eb9-401d-a32d-b90270c1454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5980e873-bc8d-4fda-9173-fb14bbe77ad9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b5571edf-56c7-4912-b1a7-e9ab7261ba71",
          "length": 41,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4639677f-dd4d-4a8b-a93e-79752ca924f0",
          "scriptId": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
          "execution": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Logout successful",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "30ff2ce80236a6f66b875b685d48028e",
          "id": "9ee3f54b-f0f7-428e-a8c9-6d74a06f14e8",
          "timestamp": 1753693453538,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8b3ae270-3b69-4e5a-b2fd-af2b9a815423",
          "name": "POST /auth/logout - User Logout",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "logout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c70d417-7eb9-401d-a32d-b90270c1454f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "5980e873-bc8d-4fda-9173-fb14bbe77ad9"
              }
            }
          ]
        },
        "parent": {
          "id": "2f09e56f-8fc2-43da-a1f7-54b4a07330f3",
          "name": "üîê Auth Domain",
          "item": [
            {
              "id": "80d010c6-8dd1-4af8-8079-04e231151a72",
              "name": "POST /auth/register - User Registration",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e774e70c-f5ed-4e88-b2d3-8a38946f8950",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('email');",
                      "    pm.globals.set('user_id', response.data.id);",
                      "    pm.globals.set('test_email', JSON.parse(pm.request.body.raw).email);",
                      "    pm.globals.set('test_password', JSON.parse(pm.request.body.raw).password);",
                      "});",
                      "",
                      "pm.test('Response has correct structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('firstName');",
                      "    pm.expect(response.data).to.have.property('lastName');",
                      "    pm.expect(response.data).to.have.property('active');",
                      "});"
                    ],
                    "_lastExecutionId": "7095b881-7329-4d64-9b47-501b66e5d38c"
                  }
                }
              ]
            },
            {
              "id": "5f826b94-00fa-48ee-9d9d-a8f9e5802056",
              "name": "POST /auth/login - User Authentication",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22aa5f5e-1520-4e8a-843c-1c9f0974e42c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('accessToken');",
                      "    pm.expect(response.data).to.have.property('tokenType');",
                      "    pm.expect(response.data).to.have.property('user');",
                      "    pm.globals.set('auth_token', response.data.accessToken);",
                      "});",
                      "",
                      "pm.test('JWT token structure is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const token = response.data.accessToken;",
                      "    pm.expect(token).to.be.a('string');",
                      "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                      "});",
                      "",
                      "pm.test('Token type is Bearer', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                      "});"
                    ],
                    "_lastExecutionId": "4e3830fa-6d05-4648-8bc0-1e63e2a208ba"
                  }
                }
              ]
            },
            {
              "id": "8b3ae270-3b69-4e5a-b2fd-af2b9a815423",
              "name": "POST /auth/logout - User Logout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "logout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4c70d417-7eb9-401d-a32d-b90270c1454f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logout successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5980e873-bc8d-4fda-9173-fb14bbe77ad9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "207fe973-0be2-4aaa-982c-b6dbba3546e1",
          "length": 41,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "41187d33-f7fa-4c82-86cd-545241ae5832",
          "scriptId": "4c70d417-7eb9-401d-a32d-b90270c1454f",
          "execution": "5980e873-bc8d-4fda-9173-fb14bbe77ad9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Product details retrieved",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "5658474c30b1d59386f88a098c3b33e8",
          "id": "09b2f368-c42e-4982-8d7d-107dbcf2eaf8",
          "timestamp": 1753693453590,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "30debe7f-e3af-4eec-af69-d98b7f2f5edc",
          "name": "GET /products/{id} - Get Product Details",
          "request": {
            "url": {
              "path": [
                "api",
                "products",
                "{{product_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "017054a7-21ba-4b07-8542-1893fce1c2c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Product details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "pm.test('Product has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    const product = response.data;",
                  "    pm.expect(product).to.have.property('name');",
                  "    pm.expect(product).to.have.property('price');",
                  "    pm.expect(product).to.have.property('category');",
                  "});"
                ],
                "_lastExecutionId": "348ed9fa-cb27-4bfe-86e7-b8b5013d7d16"
              }
            }
          ]
        },
        "parent": {
          "id": "f54f5cfc-21b2-486a-b4c3-b3ea58ce8d70",
          "name": "üõçÔ∏è Product Domain",
          "item": [
            {
              "id": "84a2004e-f4c5-4151-9491-f57a51fe0368",
              "name": "GET /products - List All Products",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6eccb25-bb81-4503-adb1-26ad6c4c21cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Products retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('content');",
                      "});",
                      "",
                      "pm.test('Response has pagination structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('totalElements');",
                      "    pm.expect(response.data).to.have.property('totalPages');",
                      "    pm.expect(response.data).to.have.property('size');",
                      "});",
                      "",
                      "pm.test('Store first product ID for testing', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data.content && response.data.content.length > 0) {",
                      "        pm.globals.set('product_id', response.data.content[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "e7d56f7f-2017-4f31-aa3a-d5a13061e56b"
                  }
                }
              ]
            },
            {
              "id": "30debe7f-e3af-4eec-af69-d98b7f2f5edc",
              "name": "GET /products/{id} - Get Product Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "{{product_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "017054a7-21ba-4b07-8542-1893fce1c2c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Product details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Product has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    const product = response.data;",
                      "    pm.expect(product).to.have.property('name');",
                      "    pm.expect(product).to.have.property('price');",
                      "    pm.expect(product).to.have.property('category');",
                      "});"
                    ],
                    "_lastExecutionId": "348ed9fa-cb27-4bfe-86e7-b8b5013d7d16"
                  }
                }
              ]
            },
            {
              "id": "126cd9fd-12af-40ca-ae11-87b102192762",
              "name": "GET /products/category/{categoryId} - Filter by Category ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "category",
                    "1"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4601a4b-1034-4f1e-9f9f-cf18a82a9876",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Category filter works', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "aaee8c30-b0da-4030-ba85-6d35f12a1b3c"
                  }
                }
              ]
            },
            {
              "id": "4fbe27e5-888b-45b8-9bac-48fa77aa7b27",
              "name": "GET /products/featured - Get Featured Products",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "featured"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ba74e9b-4193-448a-b287-8a8850be560a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Featured products retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "cd81334f-124b-4715-b8ea-05890326cbe1"
                  }
                }
              ]
            },
            {
              "id": "2e8c0aa5-84b2-4dff-8ab4-610b3715ae57",
              "name": "GET /products/slug/{slug} - Get Product by Slug",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "slug",
                    "gaming-laptop"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c51764-e4e5-4da9-9f4a-2b58c7c7d490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Product retrieved by slug', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "fd674ef4-a0a1-4db0-b451-062e88bbe882"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bc461d2e-f72e-4bb0-a343-c86e1bbfeb44",
          "length": 41,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "24176ae1-cc79-4d23-8c18-01fe284d587c",
          "scriptId": "017054a7-21ba-4b07-8542-1893fce1c2c8",
          "execution": "348ed9fa-cb27-4bfe-86e7-b8b5013d7d16"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Product has required fields",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "0be6d5b481ba5234b337c69d81566421",
          "id": "92aecd3e-5cd5-437f-a29f-fad602bdaece",
          "timestamp": 1753693453591,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "30debe7f-e3af-4eec-af69-d98b7f2f5edc",
          "name": "GET /products/{id} - Get Product Details",
          "request": {
            "url": {
              "path": [
                "api",
                "products",
                "{{product_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "017054a7-21ba-4b07-8542-1893fce1c2c8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Product details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "pm.test('Product has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    const product = response.data;",
                  "    pm.expect(product).to.have.property('name');",
                  "    pm.expect(product).to.have.property('price');",
                  "    pm.expect(product).to.have.property('category');",
                  "});"
                ],
                "_lastExecutionId": "348ed9fa-cb27-4bfe-86e7-b8b5013d7d16"
              }
            }
          ]
        },
        "parent": {
          "id": "f54f5cfc-21b2-486a-b4c3-b3ea58ce8d70",
          "name": "üõçÔ∏è Product Domain",
          "item": [
            {
              "id": "84a2004e-f4c5-4151-9491-f57a51fe0368",
              "name": "GET /products - List All Products",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6eccb25-bb81-4503-adb1-26ad6c4c21cf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Products retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('content');",
                      "});",
                      "",
                      "pm.test('Response has pagination structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('totalElements');",
                      "    pm.expect(response.data).to.have.property('totalPages');",
                      "    pm.expect(response.data).to.have.property('size');",
                      "});",
                      "",
                      "pm.test('Store first product ID for testing', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data.content && response.data.content.length > 0) {",
                      "        pm.globals.set('product_id', response.data.content[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "e7d56f7f-2017-4f31-aa3a-d5a13061e56b"
                  }
                }
              ]
            },
            {
              "id": "30debe7f-e3af-4eec-af69-d98b7f2f5edc",
              "name": "GET /products/{id} - Get Product Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "{{product_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "017054a7-21ba-4b07-8542-1893fce1c2c8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Product details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "pm.test('Product has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    const product = response.data;",
                      "    pm.expect(product).to.have.property('name');",
                      "    pm.expect(product).to.have.property('price');",
                      "    pm.expect(product).to.have.property('category');",
                      "});"
                    ],
                    "_lastExecutionId": "348ed9fa-cb27-4bfe-86e7-b8b5013d7d16"
                  }
                }
              ]
            },
            {
              "id": "126cd9fd-12af-40ca-ae11-87b102192762",
              "name": "GET /products/category/{categoryId} - Filter by Category ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "category",
                    "1"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b4601a4b-1034-4f1e-9f9f-cf18a82a9876",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Category filter works', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "aaee8c30-b0da-4030-ba85-6d35f12a1b3c"
                  }
                }
              ]
            },
            {
              "id": "4fbe27e5-888b-45b8-9bac-48fa77aa7b27",
              "name": "GET /products/featured - Get Featured Products",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "featured"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ba74e9b-4193-448a-b287-8a8850be560a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Featured products retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "cd81334f-124b-4715-b8ea-05890326cbe1"
                  }
                }
              ]
            },
            {
              "id": "2e8c0aa5-84b2-4dff-8ab4-610b3715ae57",
              "name": "GET /products/slug/{slug} - Get Product by Slug",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "slug",
                    "gaming-laptop"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f1c51764-e4e5-4da9-9f4a-2b58c7c7d490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Product retrieved by slug', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "fd674ef4-a0a1-4db0-b451-062e88bbe882"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bc461d2e-f72e-4bb0-a343-c86e1bbfeb44",
          "length": 41,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "24176ae1-cc79-4d23-8c18-01fe284d587c",
          "scriptId": "017054a7-21ba-4b07-8542-1893fce1c2c8",
          "execution": "348ed9fa-cb27-4bfe-86e7-b8b5013d7d16"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cart retrieved successfully",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "7f41dbd1d6bf5911222a073cea5aa5e6",
          "id": "34292515-c7bc-4c6c-82b1-066cc3dc59ff",
          "timestamp": 1753693453677,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
          "name": "GET /cart - Get Current Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Cart has required structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('userId');",
                  "    pm.expect(response.data).to.have.property('items');",
                  "});"
                ],
                "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
              }
            }
          ]
        },
        "parent": {
          "id": "fec37678-2adf-4f11-9767-8bf14b736b5e",
          "name": "üõí Cart Domain",
          "item": [
            {
              "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
              "name": "GET /cart - Get Current Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Cart has required structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('userId');",
                      "    pm.expect(response.data).to.have.property('items');",
                      "});"
                    ],
                    "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
                  }
                }
              ]
            },
            {
              "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
              "name": "POST /cart/items - Add Item to Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Item added to cart', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Store cart item ID', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.items && response.data.items.length > 0) {",
                      "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
                  }
                }
              ]
            },
            {
              "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
              "name": "PUT /cart/items/{itemId} - Update Item Quantity",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
                  }
                }
              ]
            },
            {
              "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
              "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item removed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
                  }
                }
              ]
            },
            {
              "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
              "name": "DELETE /cart - Clear Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "313e064a-d390-4815-8822-77db1f306544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart cleared successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
                  }
                }
              ]
            },
            {
              "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
              "name": "GET /cart/count - Get Cart Item Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e196133b-b1ac-4490-84da-ff7850b0be3f",
          "length": 41,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5b57ae22-92b8-4f2d-a766-86ff96af6b4b",
          "scriptId": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
          "execution": "ea38c5ba-efdd-4a61-8191-daef935ce770"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Cart has required structure",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "1da53a46e697b8f36739164a142308cb",
          "id": "5ef73294-6098-4964-927f-4cbf13b1a511",
          "timestamp": 1753693453678,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
          "name": "GET /cart - Get Current Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Cart has required structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('userId');",
                  "    pm.expect(response.data).to.have.property('items');",
                  "});"
                ],
                "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
              }
            }
          ]
        },
        "parent": {
          "id": "fec37678-2adf-4f11-9767-8bf14b736b5e",
          "name": "üõí Cart Domain",
          "item": [
            {
              "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
              "name": "GET /cart - Get Current Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Cart has required structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('userId');",
                      "    pm.expect(response.data).to.have.property('items');",
                      "});"
                    ],
                    "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
                  }
                }
              ]
            },
            {
              "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
              "name": "POST /cart/items - Add Item to Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Item added to cart', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Store cart item ID', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.items && response.data.items.length > 0) {",
                      "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
                  }
                }
              ]
            },
            {
              "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
              "name": "PUT /cart/items/{itemId} - Update Item Quantity",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
                  }
                }
              ]
            },
            {
              "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
              "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item removed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
                  }
                }
              ]
            },
            {
              "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
              "name": "DELETE /cart - Clear Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "313e064a-d390-4815-8822-77db1f306544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart cleared successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
                  }
                }
              ]
            },
            {
              "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
              "name": "GET /cart/count - Get Cart Item Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e196133b-b1ac-4490-84da-ff7850b0be3f",
          "length": 41,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5b57ae22-92b8-4f2d-a766-86ff96af6b4b",
          "scriptId": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
          "execution": "ea38c5ba-efdd-4a61-8191-daef935ce770"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Item added to cart",
          "message": "expected response to have status code 201 but got 401",
          "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "e8085baddded306fcfbcb50d480bf539",
          "id": "b64ebc85-ee5e-42d0-8882-27ad4363fa84",
          "timestamp": 1753693453699,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
          "name": "POST /cart/items - Add Item to Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Item added to cart', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Store cart item ID', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.items && response.data.items.length > 0) {",
                  "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
              }
            }
          ]
        },
        "parent": {
          "id": "fec37678-2adf-4f11-9767-8bf14b736b5e",
          "name": "üõí Cart Domain",
          "item": [
            {
              "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
              "name": "GET /cart - Get Current Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Cart has required structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('userId');",
                      "    pm.expect(response.data).to.have.property('items');",
                      "});"
                    ],
                    "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
                  }
                }
              ]
            },
            {
              "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
              "name": "POST /cart/items - Add Item to Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Item added to cart', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Store cart item ID', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.items && response.data.items.length > 0) {",
                      "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
                  }
                }
              ]
            },
            {
              "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
              "name": "PUT /cart/items/{itemId} - Update Item Quantity",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
                  }
                }
              ]
            },
            {
              "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
              "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item removed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
                  }
                }
              ]
            },
            {
              "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
              "name": "DELETE /cart - Clear Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "313e064a-d390-4815-8822-77db1f306544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart cleared successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
                  }
                }
              ]
            },
            {
              "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
              "name": "GET /cart/count - Get Cart Item Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "50ad7a57-6196-4247-9e50-88784d1ae685",
          "length": 41,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c1ba90ad-83b4-404c-ad8c-6a8724c72df1",
          "scriptId": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
          "execution": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cart item updated",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "0813bec85e8a1fc5a623f67785ec8c58",
          "id": "a26609e1-3881-4b63-8ef7-322d0af3df1e",
          "timestamp": 1753693453717,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
          "name": "PUT /cart/items/{itemId} - Update Item Quantity",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "items",
                "{{cart_item_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 3\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart item updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
              }
            }
          ]
        },
        "parent": {
          "id": "fec37678-2adf-4f11-9767-8bf14b736b5e",
          "name": "üõí Cart Domain",
          "item": [
            {
              "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
              "name": "GET /cart - Get Current Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Cart has required structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('userId');",
                      "    pm.expect(response.data).to.have.property('items');",
                      "});"
                    ],
                    "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
                  }
                }
              ]
            },
            {
              "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
              "name": "POST /cart/items - Add Item to Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Item added to cart', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Store cart item ID', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.items && response.data.items.length > 0) {",
                      "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
                  }
                }
              ]
            },
            {
              "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
              "name": "PUT /cart/items/{itemId} - Update Item Quantity",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
                  }
                }
              ]
            },
            {
              "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
              "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item removed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
                  }
                }
              ]
            },
            {
              "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
              "name": "DELETE /cart - Clear Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "313e064a-d390-4815-8822-77db1f306544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart cleared successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
                  }
                }
              ]
            },
            {
              "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
              "name": "GET /cart/count - Get Cart Item Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f836e423-0ca6-49e1-8d50-a899b0fe4196",
          "length": 41,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cd03b4e8-c54b-466a-bbe0-5e75fc67324c",
          "scriptId": "7f0694f6-d328-4b82-995f-2fa8528c5990",
          "execution": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cart item removed",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "b4f350a5705ec9fa09653c4b40b2f8e3",
          "id": "58a7c8ec-f1f1-4734-9e0d-bf5beb2c5cb4",
          "timestamp": 1753693453736,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
          "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "items",
                "{{cart_item_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart item removed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
              }
            }
          ]
        },
        "parent": {
          "id": "fec37678-2adf-4f11-9767-8bf14b736b5e",
          "name": "üõí Cart Domain",
          "item": [
            {
              "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
              "name": "GET /cart - Get Current Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Cart has required structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('userId');",
                      "    pm.expect(response.data).to.have.property('items');",
                      "});"
                    ],
                    "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
                  }
                }
              ]
            },
            {
              "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
              "name": "POST /cart/items - Add Item to Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Item added to cart', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Store cart item ID', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.items && response.data.items.length > 0) {",
                      "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
                  }
                }
              ]
            },
            {
              "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
              "name": "PUT /cart/items/{itemId} - Update Item Quantity",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
                  }
                }
              ]
            },
            {
              "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
              "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item removed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
                  }
                }
              ]
            },
            {
              "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
              "name": "DELETE /cart - Clear Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "313e064a-d390-4815-8822-77db1f306544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart cleared successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
                  }
                }
              ]
            },
            {
              "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
              "name": "GET /cart/count - Get Cart Item Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6b22324f-a4b5-4cb6-b337-15633a46aedc",
          "length": 41,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "223c029f-8495-4216-87b2-111ea645824d",
          "scriptId": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
          "execution": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cart cleared successfully",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "bb5405f7467fa07c439fcf568bdc696f",
          "id": "2a07d863-165b-4fef-bd1c-e9024d0942c2",
          "timestamp": 1753693453759,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
          "name": "DELETE /cart - Clear Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "cart"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "313e064a-d390-4815-8822-77db1f306544",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart cleared successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
              }
            }
          ]
        },
        "parent": {
          "id": "fec37678-2adf-4f11-9767-8bf14b736b5e",
          "name": "üõí Cart Domain",
          "item": [
            {
              "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
              "name": "GET /cart - Get Current Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Cart has required structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('userId');",
                      "    pm.expect(response.data).to.have.property('items');",
                      "});"
                    ],
                    "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
                  }
                }
              ]
            },
            {
              "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
              "name": "POST /cart/items - Add Item to Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Item added to cart', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Store cart item ID', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.items && response.data.items.length > 0) {",
                      "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
                  }
                }
              ]
            },
            {
              "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
              "name": "PUT /cart/items/{itemId} - Update Item Quantity",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
                  }
                }
              ]
            },
            {
              "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
              "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item removed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
                  }
                }
              ]
            },
            {
              "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
              "name": "DELETE /cart - Clear Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "313e064a-d390-4815-8822-77db1f306544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart cleared successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
                  }
                }
              ]
            },
            {
              "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
              "name": "GET /cart/count - Get Cart Item Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9641640d-e153-4d0d-9588-0abc040fa6c3",
          "length": 41,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "eb806816-579d-4e36-a32c-c5573f63cda9",
          "scriptId": "313e064a-d390-4815-8822-77db1f306544",
          "execution": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cart count retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "6806c28da95ad2e21b053118cb4f7b78",
          "id": "94501d03-ae63-4d2d-b14f-11de7ce5367c",
          "timestamp": 1753693453777,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
          "name": "GET /cart/count - Get Cart Item Count",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "count"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cart count retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
              }
            }
          ]
        },
        "parent": {
          "id": "fec37678-2adf-4f11-9767-8bf14b736b5e",
          "name": "üõí Cart Domain",
          "item": [
            {
              "id": "771f97bc-cb5e-4ce0-bdd9-b4c385eb3b6e",
              "name": "GET /cart - Get Current Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbab4755-38e2-474c-9ee9-5f27cb522fa7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Cart has required structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('userId');",
                      "    pm.expect(response.data).to.have.property('items');",
                      "});"
                    ],
                    "_lastExecutionId": "ea38c5ba-efdd-4a61-8191-daef935ce770"
                  }
                }
              ]
            },
            {
              "id": "bb693b69-815e-45fe-94cf-c13b6efc3531",
              "name": "POST /cart/items - Add Item to Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{product_id}}\",\n  \"quantity\": 2\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fa864ef-78b5-499e-9035-6eb38e5c75a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Item added to cart', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "pm.test('Store cart item ID', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.items && response.data.items.length > 0) {",
                      "        pm.globals.set('cart_item_id', response.data.items[0].id);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "35b64795-f2b3-4ddc-b6e5-af2d5d827524"
                  }
                }
              ]
            },
            {
              "id": "fcb14bca-65a8-407a-af57-d1deb3d36b59",
              "name": "PUT /cart/items/{itemId} - Update Item Quantity",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 3\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f0694f6-d328-4b82-995f-2fa8528c5990",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "73e4b228-f955-4a7e-9cbb-dfe19a92bd7b"
                  }
                }
              ]
            },
            {
              "id": "72d1e0ca-8216-47c4-a41c-051b421ed0ac",
              "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items",
                    "{{cart_item_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "096fa15f-d4a8-49e3-96aa-ab574f3540e2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart item removed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "e96239d3-56d5-4c27-9a91-5aaaa798ce1e"
                  }
                }
              ]
            },
            {
              "id": "7f55baa4-6069-4597-ba17-2ef785af9318",
              "name": "DELETE /cart - Clear Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "313e064a-d390-4815-8822-77db1f306544",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart cleared successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3f788bab-9cf0-475d-b8a2-ccd0b1c131c4"
                  }
                }
              ]
            },
            {
              "id": "877885d3-01e6-47d1-b486-9c247c4e7956",
              "name": "GET /cart/count - Get Cart Item Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66d21158-3aaf-48cf-a960-f1e33c22707b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cart count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "384fc9ea-f869-4188-8213-7c9061bf144b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7763994a-55ca-4bbc-875f-a7088a058c59",
          "length": 41,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fb95021c-a5ec-4960-8c92-f8900ae1f067",
          "scriptId": "66d21158-3aaf-48cf-a960-f1e33c22707b",
          "execution": "384fc9ea-f869-4188-8213-7c9061bf144b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Order placed successfully",
          "message": "expected response to have status code 201 but got 401",
          "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "73936b14fe5a29e713f96e5807fb1a67",
          "id": "8b7bdbd7-4f44-4522-866b-23d341f88f38",
          "timestamp": 1753693453797,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f07b5440-c7c8-429d-b1be-a35618923389",
          "name": "POST /orders - Place Order",
          "request": {
            "url": {
              "path": [
                "api",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad37db6f-3435-4817-a044-c853fccad34d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order placed successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.globals.set('order_id', response.data.id);",
                  "});",
                  "",
                  "pm.test('Order has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('status');",
                  "    pm.expect(response.data).to.have.property('totalAmount');",
                  "});"
                ],
                "_lastExecutionId": "4fae0364-0783-448a-943d-6b8a621963aa"
              }
            }
          ]
        },
        "parent": {
          "id": "664fb0db-95ae-40bb-8b82-747af46fd277",
          "name": "üì¶ Order Domain",
          "item": [
            {
              "id": "f07b5440-c7c8-429d-b1be-a35618923389",
              "name": "POST /orders - Place Order",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad37db6f-3435-4817-a044-c853fccad34d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order placed successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.globals.set('order_id', response.data.id);",
                      "});",
                      "",
                      "pm.test('Order has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('status');",
                      "    pm.expect(response.data).to.have.property('totalAmount');",
                      "});"
                    ],
                    "_lastExecutionId": "4fae0364-0783-448a-943d-6b8a621963aa"
                  }
                }
              ]
            },
            {
              "id": "1c6c5b6b-dbd4-4537-a664-f80560adda5d",
              "name": "GET /orders - View Order History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35eb17d9-eb0e-459c-9722-9fee074d8943",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "c599b18e-ae2e-4f75-9f56-1414b0ad7743"
                  }
                }
              ]
            },
            {
              "id": "2e18ab89-ddd5-42b3-8266-bad7243c10f1",
              "name": "GET /orders/{id} - View Order Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders",
                    "{{order_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dae04371-5f74-4a8f-87a9-5afc151eeb08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data.id).to.equal(pm.globals.get('order_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "b24dcf4b-ef4b-402e-b306-d4661104a54a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f0499e75-b5a5-4cad-947f-6ba4c42d6a99",
          "length": 41,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c389f5e6-2a85-4b8f-877c-2c0e680f04c4",
          "scriptId": "ad37db6f-3435-4817-a044-c853fccad34d",
          "execution": "4fae0364-0783-448a-943d-6b8a621963aa"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Order has required fields",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "8dfc07b08bebc0769cf6ff1a81f1f0f7",
          "id": "cfef5cc2-792a-44c6-ab01-040d6cd0dbe0",
          "timestamp": 1753693453798,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f07b5440-c7c8-429d-b1be-a35618923389",
          "name": "POST /orders - Place Order",
          "request": {
            "url": {
              "path": [
                "api",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad37db6f-3435-4817-a044-c853fccad34d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order placed successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.globals.set('order_id', response.data.id);",
                  "});",
                  "",
                  "pm.test('Order has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('status');",
                  "    pm.expect(response.data).to.have.property('totalAmount');",
                  "});"
                ],
                "_lastExecutionId": "4fae0364-0783-448a-943d-6b8a621963aa"
              }
            }
          ]
        },
        "parent": {
          "id": "664fb0db-95ae-40bb-8b82-747af46fd277",
          "name": "üì¶ Order Domain",
          "item": [
            {
              "id": "f07b5440-c7c8-429d-b1be-a35618923389",
              "name": "POST /orders - Place Order",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad37db6f-3435-4817-a044-c853fccad34d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order placed successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.globals.set('order_id', response.data.id);",
                      "});",
                      "",
                      "pm.test('Order has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('status');",
                      "    pm.expect(response.data).to.have.property('totalAmount');",
                      "});"
                    ],
                    "_lastExecutionId": "4fae0364-0783-448a-943d-6b8a621963aa"
                  }
                }
              ]
            },
            {
              "id": "1c6c5b6b-dbd4-4537-a664-f80560adda5d",
              "name": "GET /orders - View Order History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35eb17d9-eb0e-459c-9722-9fee074d8943",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "c599b18e-ae2e-4f75-9f56-1414b0ad7743"
                  }
                }
              ]
            },
            {
              "id": "2e18ab89-ddd5-42b3-8266-bad7243c10f1",
              "name": "GET /orders/{id} - View Order Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders",
                    "{{order_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dae04371-5f74-4a8f-87a9-5afc151eeb08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data.id).to.equal(pm.globals.get('order_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "b24dcf4b-ef4b-402e-b306-d4661104a54a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f0499e75-b5a5-4cad-947f-6ba4c42d6a99",
          "length": 41,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c389f5e6-2a85-4b8f-877c-2c0e680f04c4",
          "scriptId": "ad37db6f-3435-4817-a044-c853fccad34d",
          "execution": "4fae0364-0783-448a-943d-6b8a621963aa"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Order history retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "e5d119ba07faae7c434175821cfdb35e",
          "id": "0973934c-f5d5-42d0-9d97-a52e6dd72a17",
          "timestamp": 1753693453815,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1c6c5b6b-dbd4-4537-a664-f80560adda5d",
          "name": "GET /orders - View Order History",
          "request": {
            "url": {
              "path": [
                "api",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35eb17d9-eb0e-459c-9722-9fee074d8943",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "c599b18e-ae2e-4f75-9f56-1414b0ad7743"
              }
            }
          ]
        },
        "parent": {
          "id": "664fb0db-95ae-40bb-8b82-747af46fd277",
          "name": "üì¶ Order Domain",
          "item": [
            {
              "id": "f07b5440-c7c8-429d-b1be-a35618923389",
              "name": "POST /orders - Place Order",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad37db6f-3435-4817-a044-c853fccad34d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order placed successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.globals.set('order_id', response.data.id);",
                      "});",
                      "",
                      "pm.test('Order has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('status');",
                      "    pm.expect(response.data).to.have.property('totalAmount');",
                      "});"
                    ],
                    "_lastExecutionId": "4fae0364-0783-448a-943d-6b8a621963aa"
                  }
                }
              ]
            },
            {
              "id": "1c6c5b6b-dbd4-4537-a664-f80560adda5d",
              "name": "GET /orders - View Order History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35eb17d9-eb0e-459c-9722-9fee074d8943",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "c599b18e-ae2e-4f75-9f56-1414b0ad7743"
                  }
                }
              ]
            },
            {
              "id": "2e18ab89-ddd5-42b3-8266-bad7243c10f1",
              "name": "GET /orders/{id} - View Order Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders",
                    "{{order_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dae04371-5f74-4a8f-87a9-5afc151eeb08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data.id).to.equal(pm.globals.get('order_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "b24dcf4b-ef4b-402e-b306-d4661104a54a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12e9a271-b427-451c-ad58-d7f0fa144ab8",
          "length": 41,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "74d75d0b-4188-4786-9a04-f6dbdd05b2d6",
          "scriptId": "35eb17d9-eb0e-459c-9722-9fee074d8943",
          "execution": "c599b18e-ae2e-4f75-9f56-1414b0ad7743"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Order details retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "bf2fce5b235dfb4c64ddcdb62fa57c87",
          "id": "59254278-b6bd-4785-ac19-7e9552bcd1cd",
          "timestamp": 1753693453835,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2e18ab89-ddd5-42b3-8266-bad7243c10f1",
          "name": "GET /orders/{id} - View Order Details",
          "request": {
            "url": {
              "path": [
                "api",
                "orders",
                "{{order_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dae04371-5f74-4a8f-87a9-5afc151eeb08",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Order details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data.id).to.equal(pm.globals.get('order_id'));",
                  "});"
                ],
                "_lastExecutionId": "b24dcf4b-ef4b-402e-b306-d4661104a54a"
              }
            }
          ]
        },
        "parent": {
          "id": "664fb0db-95ae-40bb-8b82-747af46fd277",
          "name": "üì¶ Order Domain",
          "item": [
            {
              "id": "f07b5440-c7c8-429d-b1be-a35618923389",
              "name": "POST /orders - Place Order",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad37db6f-3435-4817-a044-c853fccad34d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order placed successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.globals.set('order_id', response.data.id);",
                      "});",
                      "",
                      "pm.test('Order has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('status');",
                      "    pm.expect(response.data).to.have.property('totalAmount');",
                      "});"
                    ],
                    "_lastExecutionId": "4fae0364-0783-448a-943d-6b8a621963aa"
                  }
                }
              ]
            },
            {
              "id": "1c6c5b6b-dbd4-4537-a664-f80560adda5d",
              "name": "GET /orders - View Order History",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "35eb17d9-eb0e-459c-9722-9fee074d8943",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "c599b18e-ae2e-4f75-9f56-1414b0ad7743"
                  }
                }
              ]
            },
            {
              "id": "2e18ab89-ddd5-42b3-8266-bad7243c10f1",
              "name": "GET /orders/{id} - View Order Details",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders",
                    "{{order_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dae04371-5f74-4a8f-87a9-5afc151eeb08",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Order details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data.id).to.equal(pm.globals.get('order_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "b24dcf4b-ef4b-402e-b306-d4661104a54a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2b703078-9e91-4283-8fc8-0bc364951152",
          "length": 41,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c8813f6c-01a3-47ac-b6e1-b430d0f99367",
          "scriptId": "dae04371-5f74-4a8f-87a9-5afc151eeb08",
          "execution": "b24dcf4b-ef4b-402e-b306-d4661104a54a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Payment processed successfully",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "0305071a575b87d0e83fd051c87d1a69",
          "id": "38b24b68-2a21-4cee-9476-0498b505a84d",
          "timestamp": 1753693453855,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b180a27a-60c1-4892-b255-7475d03605d1",
          "name": "POST /payments/process - Process Payment",
          "request": {
            "url": {
              "path": [
                "api",
                "payments",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": {{order_id}},\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment processed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.globals.set('payment_id', response.data.id);",
                  "});",
                  "",
                  "pm.test('Payment has transaction ID', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('transactionId');",
                  "    pm.expect(response.data).to.have.property('status');",
                  "});"
                ],
                "_lastExecutionId": "0b4a1d14-0992-4878-9525-664a9d86377b"
              }
            }
          ]
        },
        "parent": {
          "id": "e71e6156-3dda-42b3-a75e-a69bc18d036a",
          "name": "üí≥ Payment Domain",
          "item": [
            {
              "id": "b180a27a-60c1-4892-b255-7475d03605d1",
              "name": "POST /payments/process - Process Payment",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "payments",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"orderId\": {{order_id}},\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment processed successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.globals.set('payment_id', response.data.id);",
                      "});",
                      "",
                      "pm.test('Payment has transaction ID', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('transactionId');",
                      "    pm.expect(response.data).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0b4a1d14-0992-4878-9525-664a9d86377b"
                  }
                }
              ]
            },
            {
              "id": "3dacbb33-4452-4eea-87bb-3b31ef9ef10e",
              "name": "GET /payments/{id} - View Payment Info",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "payments",
                    "{{payment_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e582258a-0ea4-4d01-9c29-4ade8d6a4210",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data.id).to.equal(pm.globals.get('payment_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "b1c765b2-0d9d-4c72-9192-aff52432836a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "151ab13f-9e61-4105-a6c4-a97a63af5056",
          "length": 41,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "09058d12-8bfa-47a1-a378-db3bde7173eb",
          "scriptId": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
          "execution": "0b4a1d14-0992-4878-9525-664a9d86377b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Payment has transaction ID",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "0a2b377adf5881cc128e782f150e1958",
          "id": "83b5f59f-6348-4946-9dcd-bafbc5a1787e",
          "timestamp": 1753693453856,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b180a27a-60c1-4892-b255-7475d03605d1",
          "name": "POST /payments/process - Process Payment",
          "request": {
            "url": {
              "path": [
                "api",
                "payments",
                "process"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": {{order_id}},\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment processed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.globals.set('payment_id', response.data.id);",
                  "});",
                  "",
                  "pm.test('Payment has transaction ID', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('transactionId');",
                  "    pm.expect(response.data).to.have.property('status');",
                  "});"
                ],
                "_lastExecutionId": "0b4a1d14-0992-4878-9525-664a9d86377b"
              }
            }
          ]
        },
        "parent": {
          "id": "e71e6156-3dda-42b3-a75e-a69bc18d036a",
          "name": "üí≥ Payment Domain",
          "item": [
            {
              "id": "b180a27a-60c1-4892-b255-7475d03605d1",
              "name": "POST /payments/process - Process Payment",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "payments",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"orderId\": {{order_id}},\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment processed successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.globals.set('payment_id', response.data.id);",
                      "});",
                      "",
                      "pm.test('Payment has transaction ID', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('transactionId');",
                      "    pm.expect(response.data).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0b4a1d14-0992-4878-9525-664a9d86377b"
                  }
                }
              ]
            },
            {
              "id": "3dacbb33-4452-4eea-87bb-3b31ef9ef10e",
              "name": "GET /payments/{id} - View Payment Info",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "payments",
                    "{{payment_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e582258a-0ea4-4d01-9c29-4ade8d6a4210",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data.id).to.equal(pm.globals.get('payment_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "b1c765b2-0d9d-4c72-9192-aff52432836a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "151ab13f-9e61-4105-a6c4-a97a63af5056",
          "length": 41,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "09058d12-8bfa-47a1-a378-db3bde7173eb",
          "scriptId": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
          "execution": "0b4a1d14-0992-4878-9525-664a9d86377b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Payment details retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "fb2798fcc87695367e5d72012be27a82",
          "id": "f82fd074-ed9e-44d9-a175-639d574e4f2e",
          "timestamp": 1753693453875,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3dacbb33-4452-4eea-87bb-3b31ef9ef10e",
          "name": "GET /payments/{id} - View Payment Info",
          "request": {
            "url": {
              "path": [
                "api",
                "payments",
                "{{payment_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e582258a-0ea4-4d01-9c29-4ade8d6a4210",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data.id).to.equal(pm.globals.get('payment_id'));",
                  "});"
                ],
                "_lastExecutionId": "b1c765b2-0d9d-4c72-9192-aff52432836a"
              }
            }
          ]
        },
        "parent": {
          "id": "e71e6156-3dda-42b3-a75e-a69bc18d036a",
          "name": "üí≥ Payment Domain",
          "item": [
            {
              "id": "b180a27a-60c1-4892-b255-7475d03605d1",
              "name": "POST /payments/process - Process Payment",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "payments",
                    "process"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"orderId\": {{order_id}},\n  \"amount\": 29.99,\n  \"currency\": \"USD\",\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e424c1eb-0736-43ea-9bd2-7f802f018ee5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment processed successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.globals.set('payment_id', response.data.id);",
                      "});",
                      "",
                      "pm.test('Payment has transaction ID', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.have.property('transactionId');",
                      "    pm.expect(response.data).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0b4a1d14-0992-4878-9525-664a9d86377b"
                  }
                }
              ]
            },
            {
              "id": "3dacbb33-4452-4eea-87bb-3b31ef9ef10e",
              "name": "GET /payments/{id} - View Payment Info",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "payments",
                    "{{payment_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e582258a-0ea4-4d01-9c29-4ade8d6a4210",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Payment details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data.id).to.equal(pm.globals.get('payment_id'));",
                      "});"
                    ],
                    "_lastExecutionId": "b1c765b2-0d9d-4c72-9192-aff52432836a"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c8fe54b0-8d8d-4187-840f-4f1f57913ce6",
          "length": 41,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "66f86d1f-6e9b-45de-9503-fe1162ceb25b",
          "scriptId": "e582258a-0ea4-4d01-9c29-4ade8d6a4210",
          "execution": "b1c765b2-0d9d-4c72-9192-aff52432836a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User profile retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "74b27dcd754defc94dfcbc8a6cb08dfb",
          "id": "41eb2d1a-0261-473b-afab-85c61d8e2f16",
          "timestamp": 1753693453893,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c38a2dd0-8cd7-4a6f-a72b-a068e500e341",
          "name": "GET /users/profile - Get Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "profile"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b241b30d-1b88-436e-8fa1-eb19e8beca9a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "9c462a38-d8ea-43dd-8ac6-8e025e844a03"
              }
            }
          ]
        },
        "parent": {
          "id": "f4ab591f-57bf-4c95-a150-f65238cfa61d",
          "name": "üë§ User Management",
          "item": [
            {
              "id": "c38a2dd0-8cd7-4a6f-a72b-a068e500e341",
              "name": "GET /users/profile - Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b241b30d-1b88-436e-8fa1-eb19e8beca9a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "9c462a38-d8ea-43dd-8ac6-8e025e844a03"
                  }
                }
              ]
            },
            {
              "id": "6a591117-672a-44e5-bf5d-27bfe632c67d",
              "name": "GET /users/{id} - Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9303e445-cd5e-4634-82a8-2a6bc8c54a4f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User retrieved by ID', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "f9a88cf1-d9ce-4b56-ae05-1aad96f25a68"
                  }
                }
              ]
            },
            {
              "id": "8a450da8-5f8e-4202-b320-63049eac50e8",
              "name": "PUT /users/profile - Update Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"phone\": \"+1234567891\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5650bd40-9978-4f15-9a71-f0f08dc1cbf9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "23083286-9110-4bb2-a568-413857f6618d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4262ac2f-c1c6-4327-adc2-a3302785eb47",
          "length": 41,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8b680425-a632-41d4-a5e9-bfd79fbddf55",
          "scriptId": "b241b30d-1b88-436e-8fa1-eb19e8beca9a",
          "execution": "9c462a38-d8ea-43dd-8ac6-8e025e844a03"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User retrieved by ID",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "82ea2b2f1209c73c6b649306e5b1155a",
          "id": "ba13f5c6-b717-40ed-9309-2a26561a36da",
          "timestamp": 1753693453910,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6a591117-672a-44e5-bf5d-27bfe632c67d",
          "name": "GET /users/{id} - Get User by ID",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "{{user_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9303e445-cd5e-4634-82a8-2a6bc8c54a4f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User retrieved by ID', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "f9a88cf1-d9ce-4b56-ae05-1aad96f25a68"
              }
            }
          ]
        },
        "parent": {
          "id": "f4ab591f-57bf-4c95-a150-f65238cfa61d",
          "name": "üë§ User Management",
          "item": [
            {
              "id": "c38a2dd0-8cd7-4a6f-a72b-a068e500e341",
              "name": "GET /users/profile - Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b241b30d-1b88-436e-8fa1-eb19e8beca9a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "9c462a38-d8ea-43dd-8ac6-8e025e844a03"
                  }
                }
              ]
            },
            {
              "id": "6a591117-672a-44e5-bf5d-27bfe632c67d",
              "name": "GET /users/{id} - Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9303e445-cd5e-4634-82a8-2a6bc8c54a4f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User retrieved by ID', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "f9a88cf1-d9ce-4b56-ae05-1aad96f25a68"
                  }
                }
              ]
            },
            {
              "id": "8a450da8-5f8e-4202-b320-63049eac50e8",
              "name": "PUT /users/profile - Update Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"phone\": \"+1234567891\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5650bd40-9978-4f15-9a71-f0f08dc1cbf9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "23083286-9110-4bb2-a568-413857f6618d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6cbb9776-e454-42e6-bd87-2d948a971e79",
          "length": 41,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9847fe78-e6e2-456f-a309-61071b65d01b",
          "scriptId": "9303e445-cd5e-4634-82a8-2a6bc8c54a4f",
          "execution": "f9a88cf1-d9ce-4b56-ae05-1aad96f25a68"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "User profile updated",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "49373f0d246e4009af15205448b71a7f",
          "id": "3668f187-5288-4d0f-b952-d10b1694dc26",
          "timestamp": 1753693453930,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8a450da8-5f8e-4202-b320-63049eac50e8",
          "name": "PUT /users/profile - Update Current User Profile",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "profile"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"phone\": \"+1234567891\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5650bd40-9978-4f15-9a71-f0f08dc1cbf9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('User profile updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "23083286-9110-4bb2-a568-413857f6618d"
              }
            }
          ]
        },
        "parent": {
          "id": "f4ab591f-57bf-4c95-a150-f65238cfa61d",
          "name": "üë§ User Management",
          "item": [
            {
              "id": "c38a2dd0-8cd7-4a6f-a72b-a068e500e341",
              "name": "GET /users/profile - Get Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b241b30d-1b88-436e-8fa1-eb19e8beca9a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "    pm.expect(response.data).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "9c462a38-d8ea-43dd-8ac6-8e025e844a03"
                  }
                }
              ]
            },
            {
              "id": "6a591117-672a-44e5-bf5d-27bfe632c67d",
              "name": "GET /users/{id} - Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "{{user_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9303e445-cd5e-4634-82a8-2a6bc8c54a4f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User retrieved by ID', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "f9a88cf1-d9ce-4b56-ae05-1aad96f25a68"
                  }
                }
              ]
            },
            {
              "id": "8a450da8-5f8e-4202-b320-63049eac50e8",
              "name": "PUT /users/profile - Update Current User Profile",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "profile"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John Updated\",\n  \"lastName\": \"Doe Updated\",\n  \"phone\": \"+1234567891\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5650bd40-9978-4f15-9a71-f0f08dc1cbf9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('User profile updated', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "23083286-9110-4bb2-a568-413857f6618d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "52dcf6ae-4811-4120-a7f2-225a41ebcd83",
          "length": 41,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "04b24ae9-f740-4ae3-861e-3725240665a6",
          "scriptId": "5650bd40-9978-4f15-9a71-f0f08dc1cbf9",
          "execution": "23083286-9110-4bb2-a568-413857f6618d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Checkout completed successfully",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "ffdfdbae600aacc7a10f8e06cb9bc324",
          "id": "785660c1-0690-45f7-b059-932eafdf2d8e",
          "timestamp": 1753693454010,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "82d8f5ae-fc3f-4b20-95bb-2b487cc67ff6",
          "name": "POST /checkout - Complete Checkout",
          "request": {
            "url": {
              "path": [
                "api",
                "checkout"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b738a1f-b741-4d6c-ab91-8bf9647fd0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Checkout completed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('orderId');",
                  "    pm.expect(response.data).to.have.property('paymentId');",
                  "    pm.globals.set('order_id', response.data.orderId);",
                  "    pm.globals.set('payment_id', response.data.paymentId);",
                  "});"
                ],
                "_lastExecutionId": "be727c68-2b26-4635-afab-a1e2bf62794e"
              }
            }
          ]
        },
        "parent": {
          "id": "771cdbc6-a9ee-49fa-a461-8998efa38d7a",
          "name": "üõí Checkout",
          "item": [
            {
              "id": "82d8f5ae-fc3f-4b20-95bb-2b487cc67ff6",
              "name": "POST /checkout - Complete Checkout",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "checkout"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"paymentMethod\": \"card\",\n  \"paymentMethodId\": \"pm_1234567890\",\n  \"customerId\": \"cus_1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b738a1f-b741-4d6c-ab91-8bf9647fd0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Checkout completed successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('orderId');",
                      "    pm.expect(response.data).to.have.property('paymentId');",
                      "    pm.globals.set('order_id', response.data.orderId);",
                      "    pm.globals.set('payment_id', response.data.paymentId);",
                      "});"
                    ],
                    "_lastExecutionId": "be727c68-2b26-4635-afab-a1e2bf62794e"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f1fb255d-95de-4b64-b984-59d55afe6577",
          "length": 41,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9861cf57-43ec-43c1-a2d6-ad89a63b9a47",
          "scriptId": "7b738a1f-b741-4d6c-ab91-8bf9647fd0f2",
          "execution": "be727c68-2b26-4635-afab-a1e2bf62794e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Event tracked successfully",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:31)",
          "checksum": "f148b473343776aa6221dc1de72f80fb",
          "id": "cc3e5525-18e4-47af-b6cd-666f504fd075",
          "timestamp": 1753693454030,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "32aef58b-ddf2-43bc-8c31-d09ff64adebb",
          "name": "POST /analytics/track - Track Event",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "track"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventType\": \"PRODUCT_VIEW\",\n  \"productId\": {{product_id}},\n  \"category\": \"electronics\",\n  \"page\": \"/products/gaming-laptop\",\n  \"referrer\": \"/search\",\n  \"metadata\": {\n    \"source\": \"search\",\n    \"position\": 1,\n    \"search_query\": \"gaming laptop\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ccb547d1-6ec9-473f-aa85-cefe64c7b4f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Event tracked successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "});"
                ],
                "_lastExecutionId": "f8f632d8-4eb2-4fae-bbe2-a608ede78830"
              }
            }
          ]
        },
        "parent": {
          "id": "e3a87e7b-0720-4d65-8798-d3bd87ffb72d",
          "name": "üìä Analytics",
          "item": [
            {
              "id": "32aef58b-ddf2-43bc-8c31-d09ff64adebb",
              "name": "POST /analytics/track - Track Event",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "track"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"eventType\": \"PRODUCT_VIEW\",\n  \"productId\": {{product_id}},\n  \"category\": \"electronics\",\n  \"page\": \"/products/gaming-laptop\",\n  \"referrer\": \"/search\",\n  \"metadata\": {\n    \"source\": \"search\",\n    \"position\": 1,\n    \"search_query\": \"gaming laptop\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccb547d1-6ec9-473f-aa85-cefe64c7b4f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Event tracked successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success', true);",
                      "});"
                    ],
                    "_lastExecutionId": "f8f632d8-4eb2-4fae-bbe2-a608ede78830"
                  }
                }
              ]
            },
            {
              "id": "bf893da4-40c1-4b74-b71f-36ef7854e1fe",
              "name": "GET /analytics/admin/dashboard - Admin Dashboard (Admin Only)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "admin",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2025-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2025-01-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "58577893-9043-461d-8920-1aa6b01fb847",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Admin dashboard retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('totalRevenue');",
                      "    pm.expect(response.data).to.have.property('totalOrders');",
                      "});"
                    ],
                    "_lastExecutionId": "9c131c21-51e9-4a64-9104-0130cb2d586c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b22128e6-0c63-42e5-bd4f-f8c594ac7c1e",
          "length": 41,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7b2a32b5-cf15-481d-b3b2-4a95f9595b1f",
          "scriptId": "ccb547d1-6ec9-473f-aa85-cefe64c7b4f9",
          "execution": "f8f632d8-4eb2-4fae-bbe2-a608ede78830"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Admin dashboard retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:32)",
          "checksum": "ef9c3c56eb91f6b32704fd1f264fd553",
          "id": "57b34015-dba9-4410-9c69-1e1acd076c93",
          "timestamp": 1753693454049,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bf893da4-40c1-4b74-b71f-36ef7854e1fe",
          "name": "GET /analytics/admin/dashboard - Admin Dashboard (Admin Only)",
          "request": {
            "url": {
              "path": [
                "api",
                "analytics",
                "admin",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-01-31"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "58577893-9043-461d-8920-1aa6b01fb847",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Admin dashboard retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('totalRevenue');",
                  "    pm.expect(response.data).to.have.property('totalOrders');",
                  "});"
                ],
                "_lastExecutionId": "9c131c21-51e9-4a64-9104-0130cb2d586c"
              }
            }
          ]
        },
        "parent": {
          "id": "e3a87e7b-0720-4d65-8798-d3bd87ffb72d",
          "name": "üìä Analytics",
          "item": [
            {
              "id": "32aef58b-ddf2-43bc-8c31-d09ff64adebb",
              "name": "POST /analytics/track - Track Event",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "track"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"eventType\": \"PRODUCT_VIEW\",\n  \"productId\": {{product_id}},\n  \"category\": \"electronics\",\n  \"page\": \"/products/gaming-laptop\",\n  \"referrer\": \"/search\",\n  \"metadata\": {\n    \"source\": \"search\",\n    \"position\": 1,\n    \"search_query\": \"gaming laptop\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccb547d1-6ec9-473f-aa85-cefe64c7b4f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Event tracked successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success', true);",
                      "});"
                    ],
                    "_lastExecutionId": "f8f632d8-4eb2-4fae-bbe2-a608ede78830"
                  }
                }
              ]
            },
            {
              "id": "bf893da4-40c1-4b74-b71f-36ef7854e1fe",
              "name": "GET /analytics/admin/dashboard - Admin Dashboard (Admin Only)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "analytics",
                    "admin",
                    "dashboard"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "startDate",
                      "value": "2025-01-01"
                    },
                    {
                      "key": "endDate",
                      "value": "2025-01-31"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{admin_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "58577893-9043-461d-8920-1aa6b01fb847",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Admin dashboard retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('totalRevenue');",
                      "    pm.expect(response.data).to.have.property('totalOrders');",
                      "});"
                    ],
                    "_lastExecutionId": "9c131c21-51e9-4a64-9104-0130cb2d586c"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8ef78163-0155-47c1-869f-7ff78408ce2b",
          "length": 41,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2e6b1260-cbc5-408b-bb51-b05819b03221",
          "scriptId": "58577893-9043-461d-8920-1aa6b01fb847",
          "execution": "9c131c21-51e9-4a64-9104-0130cb2d586c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Notifications retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:33)",
          "checksum": "394e0adfe6f6e88ba5b8a7b2f1a24284",
          "id": "9bffae40-1bbc-4089-b36d-2867ef496ab8",
          "timestamp": 1753693454070,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a7e5e990-8dab-4d41-83dd-1f59a95bd9b1",
          "name": "GET /notifications - Get User Notifications",
          "request": {
            "url": {
              "path": [
                "api",
                "notifications"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                },
                {
                  "key": "unreadOnly",
                  "value": "false"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a05abbb-6458-4617-81f5-77b292109435",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Notifications retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "_lastExecutionId": "26f713d6-3009-424f-8cb4-6df73fa492f1"
              }
            }
          ]
        },
        "parent": {
          "id": "fbf60545-9182-4107-8c8d-ba043e7a7e3b",
          "name": "üîî Notifications",
          "item": [
            {
              "id": "a7e5e990-8dab-4d41-83dd-1f59a95bd9b1",
              "name": "GET /notifications - Get User Notifications",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "20"
                    },
                    {
                      "key": "unreadOnly",
                      "value": "false"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a05abbb-6458-4617-81f5-77b292109435",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Notifications retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "26f713d6-3009-424f-8cb4-6df73fa492f1"
                  }
                }
              ]
            },
            {
              "id": "5892477b-d9c0-428a-9b8e-06ea561f838f",
              "name": "GET /notifications/unread/count - Get Unread Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications",
                    "unread",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db942fe2-a7b9-4482-8d1b-055e911382ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unread count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "a1b6b667-2fc5-4dfa-9513-b66fb26aedc1"
                  }
                }
              ]
            },
            {
              "id": "80892317-f498-490b-882f-528f539d1583",
              "name": "PUT /notifications/{id}/read - Mark as Read",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications",
                    "1",
                    "read"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fb9fd3ae-f95f-4673-af3e-cd9140ef2504",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Notification marked as read', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "582fbea4-7960-49a9-971b-1d0306b632be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "daca239e-0d39-4b5c-b222-dee1ba4740b1",
          "length": 41,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57c28630-18b4-43eb-ba1b-7ab96d16d4d8",
          "scriptId": "3a05abbb-6458-4617-81f5-77b292109435",
          "execution": "26f713d6-3009-424f-8cb4-6df73fa492f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Unread count retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:34)",
          "checksum": "05aadea6c825119605e2bfca6c093d81",
          "id": "678049a0-f494-455d-9ed7-4b73a2928097",
          "timestamp": 1753693454090,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5892477b-d9c0-428a-9b8e-06ea561f838f",
          "name": "GET /notifications/unread/count - Get Unread Count",
          "request": {
            "url": {
              "path": [
                "api",
                "notifications",
                "unread",
                "count"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db942fe2-a7b9-4482-8d1b-055e911382ed",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Unread count retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.a('number');",
                  "});"
                ],
                "_lastExecutionId": "a1b6b667-2fc5-4dfa-9513-b66fb26aedc1"
              }
            }
          ]
        },
        "parent": {
          "id": "fbf60545-9182-4107-8c8d-ba043e7a7e3b",
          "name": "üîî Notifications",
          "item": [
            {
              "id": "a7e5e990-8dab-4d41-83dd-1f59a95bd9b1",
              "name": "GET /notifications - Get User Notifications",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "20"
                    },
                    {
                      "key": "unreadOnly",
                      "value": "false"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a05abbb-6458-4617-81f5-77b292109435",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Notifications retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "26f713d6-3009-424f-8cb4-6df73fa492f1"
                  }
                }
              ]
            },
            {
              "id": "5892477b-d9c0-428a-9b8e-06ea561f838f",
              "name": "GET /notifications/unread/count - Get Unread Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications",
                    "unread",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db942fe2-a7b9-4482-8d1b-055e911382ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unread count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "a1b6b667-2fc5-4dfa-9513-b66fb26aedc1"
                  }
                }
              ]
            },
            {
              "id": "80892317-f498-490b-882f-528f539d1583",
              "name": "PUT /notifications/{id}/read - Mark as Read",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications",
                    "1",
                    "read"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fb9fd3ae-f95f-4673-af3e-cd9140ef2504",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Notification marked as read', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "582fbea4-7960-49a9-971b-1d0306b632be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8009c28f-8669-43a9-bd5b-6c93c2014ebf",
          "length": 41,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "29981d45-b9a8-47ef-8796-f20138ae6168",
          "scriptId": "db942fe2-a7b9-4482-8d1b-055e911382ed",
          "execution": "a1b6b667-2fc5-4dfa-9513-b66fb26aedc1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Notification marked as read",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:35)",
          "checksum": "9b6731e3ef1cb0d1bbc7e1fc6fb29a15",
          "id": "866d2b0d-01b1-465e-85e7-b126426d13e7",
          "timestamp": 1753693454109,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "80892317-f498-490b-882f-528f539d1583",
          "name": "PUT /notifications/{id}/read - Mark as Read",
          "request": {
            "url": {
              "path": [
                "api",
                "notifications",
                "1",
                "read"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fb9fd3ae-f95f-4673-af3e-cd9140ef2504",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Notification marked as read', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "582fbea4-7960-49a9-971b-1d0306b632be"
              }
            }
          ]
        },
        "parent": {
          "id": "fbf60545-9182-4107-8c8d-ba043e7a7e3b",
          "name": "üîî Notifications",
          "item": [
            {
              "id": "a7e5e990-8dab-4d41-83dd-1f59a95bd9b1",
              "name": "GET /notifications - Get User Notifications",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "20"
                    },
                    {
                      "key": "unreadOnly",
                      "value": "false"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a05abbb-6458-4617-81f5-77b292109435",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Notifications retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "});"
                    ],
                    "_lastExecutionId": "26f713d6-3009-424f-8cb4-6df73fa492f1"
                  }
                }
              ]
            },
            {
              "id": "5892477b-d9c0-428a-9b8e-06ea561f838f",
              "name": "GET /notifications/unread/count - Get Unread Count",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications",
                    "unread",
                    "count"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db942fe2-a7b9-4482-8d1b-055e911382ed",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unread count retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.a('number');",
                      "});"
                    ],
                    "_lastExecutionId": "a1b6b667-2fc5-4dfa-9513-b66fb26aedc1"
                  }
                }
              ]
            },
            {
              "id": "80892317-f498-490b-882f-528f539d1583",
              "name": "PUT /notifications/{id}/read - Mark as Read",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "notifications",
                    "1",
                    "read"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fb9fd3ae-f95f-4673-af3e-cd9140ef2504",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Notification marked as read', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "582fbea4-7960-49a9-971b-1d0306b632be"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9cda2c5a-570e-4910-ac63-e53092035206",
          "length": 41,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e43fb7dc-b5f2-4b26-b310-012b4946ccc5",
          "scriptId": "fb9fd3ae-f95f-4673-af3e-cd9140ef2504",
          "execution": "582fbea4-7960-49a9-971b-1d0306b632be"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Invalid product ID returns error",
          "message": "expected response to have status code 404 but got 401",
          "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:40)",
          "checksum": "1557f563237c26e99d5ffceac46fe988",
          "id": "88b03e3f-de2e-4566-8cf6-6c86f18702a1",
          "timestamp": 1753693454211,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a8433dbb-533a-4896-ad7f-ccbb4497e8b5",
          "name": "POST /cart/items - Add Invalid Product",
          "request": {
            "url": {
              "path": [
                "api",
                "cart",
                "items"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": 999999,\n  \"quantity\": 1\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5cf4697-9691-4345-a352-66bd62cd2dbd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid product ID returns error', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "c4e8d648-686d-4d5c-9e73-7c8d12f4f927"
              }
            }
          ]
        },
        "parent": {
          "id": "f6de97f5-66d5-4e9f-a438-65716df3b8b9",
          "name": "‚ö†Ô∏è Error Scenarios",
          "item": [
            {
              "id": "2a6ed5ee-5820-4ce0-9cca-0258cce505d4",
              "name": "GET /products/999999 - Invalid Product ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "838f29e2-79a3-43e7-85ac-32333f9c336c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid product ID returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "37544f47-ac20-4aad-a7bd-603bdf043e77"
                  }
                }
              ]
            },
            {
              "id": "2bbfb074-24e6-485b-952c-f112e93c149f",
              "name": "GET /cart - Unauthorized Access",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3a7ac1b-227b-4c00-af7d-e184f0cdc26e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "685448b8-aeaf-469a-bb79-8690d049daa8"
                  }
                }
              ]
            },
            {
              "id": "f843f282-b898-40ea-8371-a6f17e44110e",
              "name": "POST /auth/login - Invalid Credentials",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eebe0d34-cc78-44ac-8193-dbcbae8127f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid credentials return proper error', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is helpful', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.message).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "53480ac7-fe2e-4431-988f-3791e4b93e4c"
                  }
                }
              ]
            },
            {
              "id": "2c2990bb-1f83-4fbc-9a36-62812ef2fea0",
              "name": "POST /auth/register - Duplicate Email",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"{{test_email}}\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7a60c27-afd0-4c62-938b-561fd7304ea2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Duplicate email returns error', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error indicates duplicate email', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "e0d06d03-3581-4d2d-89b9-af9e040cc161"
                  }
                }
              ]
            },
            {
              "id": "a8433dbb-533a-4896-ad7f-ccbb4497e8b5",
              "name": "POST /cart/items - Add Invalid Product",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": 999999,\n  \"quantity\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5cf4697-9691-4345-a352-66bd62cd2dbd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid product ID returns error', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "c4e8d648-686d-4d5c-9e73-7c8d12f4f927"
                  }
                }
              ]
            },
            {
              "id": "87f075ae-9964-4785-81a1-78420e8d3e78",
              "name": "POST /orders - Create Order with Empty Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7bf42d2-09a3-4bb0-8b1c-05b7ea35b660",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Empty cart returns error', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error message indicates empty cart', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "73391129-b5d6-4c54-8b4b-ef3eb926966b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "46abc022-48d7-421d-8fc9-183f0e1ee3c3",
          "length": 41,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2fc74fad-8d64-409f-ae42-e3b9ab58e0ff",
          "scriptId": "c5cf4697-9691-4345-a352-66bd62cd2dbd",
          "execution": "c4e8d648-686d-4d5c-9e73-7c8d12f4f927"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Empty cart returns error",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)",
          "checksum": "c70b0c5506fbe0f528b0d8ba43994e74",
          "id": "18553934-b8ea-49a9-b679-91cfae6047c1",
          "timestamp": 1753693454233,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 41,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "87f075ae-9964-4785-81a1-78420e8d3e78",
          "name": "POST /orders - Create Order with Empty Cart",
          "request": {
            "url": {
              "path": [
                "api",
                "orders"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7bf42d2-09a3-4bb0-8b1c-05b7ea35b660",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Empty cart returns error', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates empty cart', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "_lastExecutionId": "73391129-b5d6-4c54-8b4b-ef3eb926966b"
              }
            }
          ]
        },
        "parent": {
          "id": "f6de97f5-66d5-4e9f-a438-65716df3b8b9",
          "name": "‚ö†Ô∏è Error Scenarios",
          "item": [
            {
              "id": "2a6ed5ee-5820-4ce0-9cca-0258cce505d4",
              "name": "GET /products/999999 - Invalid Product ID",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "products",
                    "999999"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "838f29e2-79a3-43e7-85ac-32333f9c336c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid product ID returns 404', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "37544f47-ac20-4aad-a7bd-603bdf043e77"
                  }
                }
              ]
            },
            {
              "id": "2bbfb074-24e6-485b-952c-f112e93c149f",
              "name": "GET /cart - Unauthorized Access",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3a7ac1b-227b-4c00-af7d-e184f0cdc26e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Unauthorized access returns 401', function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ],
                    "_lastExecutionId": "685448b8-aeaf-469a-bb79-8690d049daa8"
                  }
                }
              ]
            },
            {
              "id": "f843f282-b898-40ea-8371-a6f17e44110e",
              "name": "POST /auth/login - Invalid Credentials",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eebe0d34-cc78-44ac-8193-dbcbae8127f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid credentials return proper error', function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test('Error message is helpful', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.message).to.be.a('string');",
                      "});"
                    ],
                    "_lastExecutionId": "53480ac7-fe2e-4431-988f-3791e4b93e4c"
                  }
                }
              ]
            },
            {
              "id": "2c2990bb-1f83-4fbc-9a36-62812ef2fea0",
              "name": "POST /auth/register - Duplicate Email",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "register"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"{{test_email}}\",\n  \"password\": \"SecurePassword123!\",\n  \"phone\": \"+1234567890\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7a60c27-afd0-4c62-938b-561fd7304ea2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Duplicate email returns error', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error indicates duplicate email', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "e0d06d03-3581-4d2d-89b9-af9e040cc161"
                  }
                }
              ]
            },
            {
              "id": "a8433dbb-533a-4896-ad7f-ccbb4497e8b5",
              "name": "POST /cart/items - Add Invalid Product",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "cart",
                    "items"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": 999999,\n  \"quantity\": 1\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5cf4697-9691-4345-a352-66bd62cd2dbd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Invalid product ID returns error', function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test('Error response has proper structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "c4e8d648-686d-4d5c-9e73-7c8d12f4f927"
                  }
                }
              ]
            },
            {
              "id": "87f075ae-9964-4785-81a1-78420e8d3e78",
              "name": "POST /orders - Create Order with Empty Cart",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "orders"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a7bf42d2-09a3-4bb0-8b1c-05b7ea35b660",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Empty cart returns error', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Error message indicates empty cart', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "});"
                    ],
                    "_lastExecutionId": "73391129-b5d6-4c54-8b4b-ef3eb926966b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f873d769-1759-4f47-b942-d23af433d7b2",
          "length": 41,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4f32081f-4f1b-4cb0-a43f-dd19af921301",
          "scriptId": "a7bf42d2-09a3-4bb0-8b1c-05b7ea35b660",
          "execution": "73391129-b5d6-4c54-8b4b-ef3eb926966b"
        }
      }
    ],
    "error": null
  }
}