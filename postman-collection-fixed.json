{
  "info": {
    "name": "E-Commerce API - Fixed Test Collection",
    "description": "Fixed comprehensive API testing collection for E-Commerce Application with proper variable management",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.1.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "product_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "cart_item_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "order_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_email",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_password",
      "value": "SecurePassword123!",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔍 Health Check",
      "item": [
        {
          "name": "GET /health - Basic Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/health",
              "host": ["{{base_url}}"],
              "path": ["api", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status', 'UP');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔐 Auth Domain",
      "item": [
        {
          "name": "POST /auth/register - User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@example.com\",\n  \"password\": \"{{test_password}}\",\n  \"phone\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data).to.have.property('email');",
                  "    ",
                  "    // Store user info for login",
                  "    pm.collectionVariables.set('user_id', response.data.id);",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.collectionVariables.set('test_email', requestBody.email);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('firstName');",
                  "    pm.expect(response.data).to.have.property('lastName');",
                  "    pm.expect(response.data).to.have.property('active');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /auth/login - User Authentication",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('accessToken');",
                  "    pm.expect(response.data).to.have.property('tokenType');",
                  "    pm.expect(response.data).to.have.property('user');",
                  "    ",
                  "    // Store auth token for subsequent requests",
                  "    pm.collectionVariables.set('auth_token', response.data.accessToken);",
                  "});",
                  "",
                  "pm.test('JWT token structure is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const token = response.data.accessToken;",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.split('.')).to.have.lengthOf(3);",
                  "});",
                  "",
                  "pm.test('Token type is Bearer', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.tokenType).to.equal('Bearer');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🛍️ Product Domain",
      "item": [
        {
          "name": "GET /products - List All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products?page=0&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Products retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('content');",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('totalElements');",
                  "    pm.expect(response.data).to.have.property('totalPages');",
                  "    pm.expect(response.data).to.have.property('size');",
                  "});",
                  "",
                  "pm.test('Store first product ID for testing', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data.content && response.data.content.length > 0) {",
                  "        pm.collectionVariables.set('product_id', response.data.content[0].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /products/{id} - Get Product Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "{{product_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "pm.test('Product has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    const product = response.data;",
                  "    pm.expect(product).to.have.property('name');",
                  "    pm.expect(product).to.have.property('price');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🛒 Cart Domain",
      "item": [
        {
          "name": "GET /cart - Get Current Cart",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart",
              "host": ["{{base_url}}"],
              "path": ["api", "cart"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Cart has required structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('userId');",
                  "    pm.expect(response.data).to.have.property('items');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /cart/items - Add Item to Cart",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": {{product_id}},\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/items",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "items"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Item added to cart', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Store cart item ID', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.items && response.data.items.length > 0) {",
                  "        pm.collectionVariables.set('cart_item_id', response.data.items[0].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT /cart/items/{itemId} - Update Item Quantity",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 3\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/cart/items/{{cart_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "items", "{{cart_item_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart item updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Quantity updated correctly', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.items && response.data.items.length > 0) {",
                  "        const updatedItem = response.data.items.find(item => item.id == pm.collectionVariables.get('cart_item_id'));",
                  "        if (updatedItem) {",
                  "            pm.expect(updatedItem.quantity).to.equal(3);",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/items/{{cart_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "items", "{{cart_item_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart item removed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Item removed from cart', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.items) {",
                  "        const removedItem = response.data.items.find(item => item.id == pm.collectionVariables.get('cart_item_id'));",
                  "        pm.expect(removedItem).to.be.undefined;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /cart - Clear Entire Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart",
              "host": ["{{base_url}}"],
              "path": ["api", "cart"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart cleared successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Success message returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('cleared');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /cart/count - Get Cart Item Count",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/count",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "count"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart count retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Count is non-negative', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.be.at.least(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "🔄 Cart Operations Workflow Test",
          "item": [
            {
              "name": "Step 1: Add Multiple Items",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": 1,\n  \"quantity\": 2\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/cart/items",
                  "host": ["{{base_url}}"],
                  "path": ["api", "cart", "items"]
                }
              }
            },
            {
              "name": "Step 2: Add Another Item",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": 2,\n  \"quantity\": 1\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/cart/items",
                  "host": ["{{base_url}}"],
                  "path": ["api", "cart", "items"]
                }
              }
            },
            {
              "name": "Step 3: Verify Cart State",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/cart",
                  "host": ["{{base_url}}"],
                  "path": ["api", "cart"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Cart contains multiple items', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data.items).to.have.length.at.least(2);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Step 4: Update Item Quantity",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 5\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/cart/items/{{cart_item_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "cart", "items", "{{cart_item_id}}"]
                }
              }
            },
            {
              "name": "Step 5: Remove Specific Item",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/cart/items/{{cart_item_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["api", "cart", "items", "{{cart_item_id}}"]
                }
              }
            },
            {
              "name": "Step 6: Clear Entire Cart",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/cart",
                  "host": ["{{base_url}}"],
                  "path": ["api", "cart"]
                }
              }
            },
            {
              "name": "Step 7: Verify Empty Cart",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/cart/count",
                  "host": ["{{base_url}}"],
                  "path": ["api", "cart", "count"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Cart is empty after clearing', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.data).to.equal(0);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "📦 Order Domain",
      "item": [
        {
          "name": "POST /orders - Place Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\",\n    \"country\": \"US\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order placed successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.collectionVariables.set('order_id', response.data.id.toString());",
                  "});",
                  "",
                  "pm.test('Order has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('status');",
                  "    pm.expect(response.data).to.have.property('totalAmount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /orders - View Order History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders",
              "host": ["{{base_url}}"],
              "path": ["api", "orders"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /orders/{id} - View Order Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/orders/{{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "orders", "{{order_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data.id.toString()).to.equal(pm.collectionVariables.get('order_id'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔍 Search & Recommendations",
      "item": [
        {
          "name": "GET /search/products - Search Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/products?query=laptop&page=0&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "search", "products"],
              "query": [
                {
                  "key": "query",
                  "value": "laptop"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Search results retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /search/recommendations - Get Recommendations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/search/recommendations?limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "search", "recommendations"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Recommendations retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "💳 Payment & Webhooks",
      "item": [
        {
          "name": "POST /webhooks/stripe - Stripe Webhook Handler",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Stripe-Signature",
                "value": "t=1234567890,v1=test_signature",
                "description": "Required Stripe webhook signature"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"evt_test_webhook\",\n  \"object\": \"event\",\n  \"api_version\": \"2020-08-27\",\n  \"created\": 1234567890,\n  \"data\": {\n    \"object\": {\n      \"id\": \"pi_test_payment_intent\",\n      \"object\": \"payment_intent\",\n      \"amount\": 2000,\n      \"currency\": \"usd\",\n      \"status\": \"succeeded\"\n    }\n  },\n  \"livemode\": false,\n  \"pending_webhooks\": 1,\n  \"request\": {\n    \"id\": \"req_test_request\",\n    \"idempotency_key\": null\n  },\n  \"type\": \"payment_intent.succeeded\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/stripe",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "stripe"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Webhook processed successfully', function () {",
                  "    // Note: This endpoint requires valid Stripe signature in production",
                  "    // Expected responses: 200 (processed), 400 (invalid), 500 (error)",
                  "    pm.expect([200, 400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response is string format', function () {",
                  "    // Webhook endpoint returns plain text responses",
                  "    pm.expect(pm.response.text()).to.be.a('string');",
                  "});",
                  "",
                  "// Log response for debugging webhook processing",
                  "console.log('Webhook Response:', pm.response.text());"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /webhooks/stripe - Payment Failed Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Stripe-Signature",
                "value": "t=1234567890,v1=test_signature"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"evt_test_webhook_failed\",\n  \"object\": \"event\",\n  \"api_version\": \"2020-08-27\",\n  \"created\": 1234567890,\n  \"data\": {\n    \"object\": {\n      \"id\": \"pi_test_payment_intent_failed\",\n      \"object\": \"payment_intent\",\n      \"amount\": 2000,\n      \"currency\": \"usd\",\n      \"status\": \"requires_payment_method\",\n      \"last_payment_error\": {\n        \"code\": \"card_declined\",\n        \"decline_code\": \"generic_decline\",\n        \"message\": \"Your card was declined.\"\n      }\n    }\n  },\n  \"livemode\": false,\n  \"pending_webhooks\": 1,\n  \"request\": {\n    \"id\": \"req_test_request_failed\",\n    \"idempotency_key\": null\n  },\n  \"type\": \"payment_intent.payment_failed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhooks/stripe",
              "host": ["{{base_url}}"],
              "path": ["api", "webhooks", "stripe"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Payment failed webhook processed', function () {",
                  "    pm.expect([200, 400, 500]).to.include(pm.response.code);",
                  "});",
                  "",
                  "console.log('Payment Failed Webhook Response:', pm.response.text());"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "⚠️ Error Scenarios",
      "item": [
        {
          "name": "GET /products/999999 - Invalid Product ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/products/999999",
              "host": ["{{base_url}}"],
              "path": ["api", "products", "999999"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid product ID returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response has proper structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', false);",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET /cart - Unauthorized Access",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/cart",
              "host": ["{{base_url}}"],
              "path": ["api", "cart"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized access returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /auth/login - Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid credentials return proper error', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is helpful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /auth/register - Duplicate Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"phone\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Duplicate email returns error', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates duplicate email', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message.toLowerCase()).to.include('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🧹 Cleanup",
      "item": [
        {
          "name": "DELETE /cart/items/{itemId} - Remove Item from Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart/items/{{cart_item_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "cart", "items", "{{cart_item_id}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart item removed', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE /cart - Clear Cart",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/cart",
              "host": ["{{base_url}}"],
              "path": ["api", "cart"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cart cleared successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST /auth/logout - User Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    // Clear the auth token",
                  "    pm.collectionVariables.set('auth_token', '');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}