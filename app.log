[[1;34mINFO[m] Scanning for projects...
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m---------------------------< [0;36mcom:E-commerce[0;1m >---------------------------[m
[[1;34mINFO[m] [1mBuilding E-commerce 0.0.1-SNAPSHOT[m
[[1;34mINFO[m] [1m--------------------------------[ jar ]---------------------------------[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m>>> [0;32mspring-boot-maven-plugin:3.5.3:run[m [1m(default-cli)[0;1m > [0;1mtest-compile[m @ [36mE-commerce[0;1m >>>[m
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:resources[m [1m(default-resources)[m @ [36mE-commerce[0;1m ---[m
[[1;34mINFO[m] Copying 5 resources from src/main/resources to target/classes
[[1;34mINFO[m] Copying 9 resources from src/main/resources to target/classes
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.11.0:compile[m [1m(default-compile)[m @ [36mE-commerce[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module! :source
[[1;34mINFO[m] Compiling 252 source files with javac [debug release 17] to target/classes
[[1;33mWARNING[m] /home/hasin/Music/SDA/E-commerce/src/main/java/com/ecommerce/core/domain/notification/Notification.java:[37,21] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
[[1;33mWARNING[m] Implicitly compiled files were not subject to annotation processing.
  Use -proc:none to disable annotation processing or -implicit to specify a policy for implicit compilation.
[[1;34mINFO[m] /home/hasin/Music/SDA/E-commerce/src/main/java/com/ecommerce/infrastructure/common/JsonType.java: /home/hasin/Music/SDA/E-commerce/src/main/java/com/ecommerce/infrastructure/common/JsonType.java uses unchecked or unsafe operations.
[[1;34mINFO[m] /home/hasin/Music/SDA/E-commerce/src/main/java/com/ecommerce/infrastructure/common/JsonType.java: Recompile with -Xlint:unchecked for details.
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-resources-plugin:3.3.1:testResources[m [1m(default-testResources)[m @ [36mE-commerce[0;1m ---[m
[[1;34mINFO[m] skip non existing resourceDirectory /home/hasin/Music/SDA/E-commerce/src/test/resources
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mmaven-compiler-plugin:3.11.0:testCompile[m [1m(default-testCompile)[m @ [36mE-commerce[0;1m ---[m
[[1;34mINFO[m] Changes detected - recompiling the module! :dependency
[[1;34mINFO[m] Compiling 2 source files with javac [debug release 17] to target/test-classes
[[1;33mWARNING[m] /home/hasin/Music/SDA/E-commerce/src/test/java/com/ecommerce/ECommerceApplicationTests.java:[11,6] org.springframework.boot.test.mock.mockito.MockBean in org.springframework.boot.test.mock.mockito has been deprecated and marked for removal
[[1;33mWARNING[m] /home/hasin/Music/SDA/E-commerce/src/test/java/com/ecommerce/ECommerceApplicationTests.java:[11,6] org.springframework.boot.test.mock.mockito.MockBean in org.springframework.boot.test.mock.mockito has been deprecated and marked for removal
[[1;33mWARNING[m] /home/hasin/Music/SDA/E-commerce/src/test/java/com/ecommerce/ECommerceApplicationTests.java:[11,6] org.springframework.boot.test.mock.mockito.MockBean in org.springframework.boot.test.mock.mockito has been deprecated and marked for removal
[[1;33mWARNING[m] /home/hasin/Music/SDA/E-commerce/src/test/java/com/ecommerce/ECommerceApplicationTests.java:[11,6] org.springframework.boot.test.mock.mockito.MockBean in org.springframework.boot.test.mock.mockito has been deprecated and marked for removal
[[1;33mWARNING[m] /home/hasin/Music/SDA/E-commerce/src/test/java/com/ecommerce/ECommerceApplicationTests.java:[11,6] org.springframework.boot.test.mock.mockito.MockBean in org.springframework.boot.test.mock.mockito has been deprecated and marked for removal
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m<<< [0;32mspring-boot-maven-plugin:3.5.3:run[m [1m(default-cli)[0;1m < [0;1mtest-compile[m @ [36mE-commerce[0;1m <<<[m
[[1;34mINFO[m] 
[[1;34mINFO[m] 
[[1;34mINFO[m] [1m--- [0;32mspring-boot-maven-plugin:3.5.3:run[m [1m(default-cli)[m @ [36mE-commerce[0;1m ---[m
[[1;34mINFO[m] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.3)

2025-07-21 20:14:28 - Starting ECommerceApplication using Java 17.0.15 with PID 14924 (/home/hasin/Music/SDA/E-commerce/target/classes started by hasin in /home/hasin/Music/SDA/E-commerce)
2025-07-21 20:14:28 - Running with Spring Boot v3.5.3, Spring v6.2.8
2025-07-21 20:14:28 - The following 1 profile is active: "dev"
2025-07-21 20:14:28 - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2025-07-21 20:14:28 - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2025-07-21 20:14:29 - Multiple Spring Data modules found, entering strict repository configuration mode
2025-07-21 20:14:29 - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-07-21 20:14:29 - Spring Data JPA - Could not safely identify store assignment for repository candidate interface com.ecommerce.adapter.persistence.elasticsearch.repository.ProductSearchRepository; If you want this repository to be a JPA repository, consider annotating your entities with one of these annotations: jakarta.persistence.Entity, jakarta.persistence.MappedSuperclass (preferred), or consider extending one of the following types with your repository: org.springframework.data.jpa.repository.JpaRepository
2025-07-21 20:14:29 - Finished Spring Data repository scanning in 70 ms. Found 8 JPA repository interfaces.
2025-07-21 20:14:30 - Tomcat initialized with port 8081 (http)
2025-07-21 20:14:30 - Starting service [Tomcat]
2025-07-21 20:14:30 - Starting Servlet engine: [Apache Tomcat/10.1.42]
2025-07-21 20:14:30 - Initializing Spring embedded WebApplicationContext
2025-07-21 20:14:30 - Root WebApplicationContext: initialization completed in 1724 ms
2025-07-21 20:14:30 - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-07-21 20:14:30 - HHH000412: Hibernate ORM core version 6.6.18.Final
2025-07-21 20:14:30 - HHH000026: Second-level cache disabled
2025-07-21 20:14:30 - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-07-21 20:14:30 - HikariPool-1 - Starting...
2025-07-21 20:14:30 - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-07-21 20:14:30 - HikariPool-1 - Start completed.
2025-07-21 20:14:30 - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-07-21 20:14:30 - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-07-21 20:14:32 - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-07-21 20:14:32 - 
    drop table if exists cart_items cascade 
Hibernate: 
    drop table if exists cart_items cascade 
2025-07-21 20:14:32 - 
    drop table if exists carts cascade 
Hibernate: 
    drop table if exists carts cascade 
2025-07-21 20:14:32 - 
    drop table if exists categories cascade 
Hibernate: 
    drop table if exists categories cascade 
2025-07-21 20:14:32 - 
    drop table if exists event_entity cascade 
Hibernate: 
    drop table if exists event_entity cascade 
2025-07-21 20:14:32 - 
    drop table if exists notifications cascade 
Hibernate: 
    drop table if exists notifications cascade 
2025-07-21 20:14:32 - 
    drop table if exists order_items cascade 
Hibernate: 
    drop table if exists order_items cascade 
2025-07-21 20:14:32 - 
    drop table if exists orders cascade 
Hibernate: 
    drop table if exists orders cascade 
2025-07-21 20:14:32 - 
    drop table if exists payments cascade 
Hibernate: 
    drop table if exists payments cascade 
2025-07-21 20:14:32 - 
    drop table if exists product_categories cascade 
Hibernate: 
    drop table if exists product_categories cascade 
2025-07-21 20:14:32 - 
    drop table if exists products cascade 
Hibernate: 
    drop table if exists products cascade 
2025-07-21 20:14:32 - 
    drop table if exists transactions cascade 
Hibernate: 
    drop table if exists transactions cascade 
2025-07-21 20:14:32 - 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
2025-07-21 20:14:32 - 
    create table cart_items (
        price numeric(38,2) not null,
        quantity integer not null,
        cart_id bigint not null,
        cart_item_id bigint generated by default as identity,
        created_at timestamp(6) not null,
        product_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (cart_item_id)
    )
Hibernate: 
    create table cart_items (
        price numeric(38,2) not null,
        quantity integer not null,
        cart_id bigint not null,
        cart_item_id bigint generated by default as identity,
        created_at timestamp(6) not null,
        product_id bigint not null,
        updated_at timestamp(6) not null,
        primary key (cart_item_id)
    )
2025-07-21 20:14:32 - 
    create table carts (
        cart_id bigint generated by default as identity,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint unique,
        primary key (cart_id)
    )
Hibernate: 
    create table carts (
        cart_id bigint generated by default as identity,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint unique,
        primary key (cart_id)
    )
2025-07-21 20:14:32 - 
    create table categories (
        category_id bigint generated by default as identity,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        slug varchar(255) not null unique,
        primary key (category_id)
    )
Hibernate: 
    create table categories (
        category_id bigint generated by default as identity,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        slug varchar(255) not null unique,
        primary key (category_id)
    )
2025-07-21 20:14:32 - 
    create table event_entity (
        timestamp timestamp(6),
        id uuid not null,
        event_type varchar(255),
        session_id varchar(255),
        user_id varchar(255),
        details jsonb,
        primary key (id)
    )
Hibernate: 
    create table event_entity (
        timestamp timestamp(6),
        id uuid not null,
        event_type varchar(255),
        session_id varchar(255),
        user_id varchar(255),
        details jsonb,
        primary key (id)
    )
2025-07-21 20:14:32 - GenerationTarget encountered exception accepting command : Error executing DDL "
    create table event_entity (
        timestamp timestamp(6),
        id uuid not null,
        event_type varchar(255),
        session_id varchar(255),
        user_id varchar(255),
        details jsonb,
        primary key (id)
    )" via JDBC [Unknown data type: "JSONB";]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    create table event_entity (
        timestamp timestamp(6),
        id uuid not null,
        event_type varchar(255),
        session_id varchar(255),
        user_id varchar(255),
        details jsonb,
        primary key (id)
    )" via JDBC [Unknown data type: "JSONB";]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233)
	at org.hibernate.tool.schema.internal.Helper.applySqlStrings(Helper.java:217)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createTables(SchemaCreatorImpl.java:430)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createSequencesTablesConstraints(SchemaCreatorImpl.java:346)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createFromMetadata(SchemaCreatorImpl.java:241)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.performCreation(SchemaCreatorImpl.java:174)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:144)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:120)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:250)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:324)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:463)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1517)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:691)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:513)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:365)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:135)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1725)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1474)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1683)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1628)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:913)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:546)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1683)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1628)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:913)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:240)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1232)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1745)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1628)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:913)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:240)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1232)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:230)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:184)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:179)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:164)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:271)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:245)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4464)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:412)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:870)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:438)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:128)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:517)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:219)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:193)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:167)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:621)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.ecommerce.ECommerceApplication.main(ECommerceApplication.java:19)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "JSONB"; SQL statement:

    create table event_entity (
        timestamp timestamp(6),
        id uuid not null,
        event_type varchar(255),
        session_id varchar(255),
        user_id varchar(255),
        details jsonb,
        primary key (id)
    ) [50004-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.Parser.readIfDataType1(Parser.java:5860)
	at org.h2.command.Parser.readIfDataType(Parser.java:5698)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5680)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5559)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:8876)
	at org.h2.command.Parser.parseCreateTable(Parser.java:8819)
	at org.h2.command.Parser.parseCreate(Parser.java:6398)
	at org.h2.command.Parser.parsePrepared(Parser.java:645)
	at org.h2.command.Parser.parse(Parser.java:581)
	at org.h2.command.Parser.parse(Parser.java:556)
	at org.h2.command.Parser.prepareCommand(Parser.java:484)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:645)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:561)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1164)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:95)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 142 common frames omitted
2025-07-21 20:14:32 - 
    create table notifications (
        is_read boolean,
        created_at timestamp(6),
        id bigint generated by default as identity,
        read_at timestamp(6),
        user_id bigint not null,
        email varchar(255),
        error_message varchar(255),
        message TEXT,
        phone_number varchar(255),
        title varchar(255) not null,
        status enum ('FAILED','PENDING','READ','SENT'),
        type enum ('ACCOUNT_CREATED','ORDER_CONFIRMATION','ORDER_DELIVERED','ORDER_SHIPPED','PASSWORD_RESET','PAYMENT_FAILED','PAYMENT_SUCCESS','PROMOTION','SYSTEM_ALERT') not null,
        primary key (id)
    )
Hibernate: 
    create table notifications (
        is_read boolean,
        created_at timestamp(6),
        id bigint generated by default as identity,
        read_at timestamp(6),
        user_id bigint not null,
        email varchar(255),
        error_message varchar(255),
        message TEXT,
        phone_number varchar(255),
        title varchar(255) not null,
        status enum ('FAILED','PENDING','READ','SENT'),
        type enum ('ACCOUNT_CREATED','ORDER_CONFIRMATION','ORDER_DELIVERED','ORDER_SHIPPED','PASSWORD_RESET','PAYMENT_FAILED','PAYMENT_SUCCESS','PROMOTION','SYSTEM_ALERT') not null,
        primary key (id)
    )
2025-07-21 20:14:32 - 
    create table order_items (
        quantity integer not null,
        total_price numeric(10,2) not null,
        unit_price numeric(10,2) not null,
        order_id bigint not null,
        order_item_id bigint generated by default as identity,
        product_id bigint not null,
        primary key (order_item_id)
    )
Hibernate: 
    create table order_items (
        quantity integer not null,
        total_price numeric(10,2) not null,
        unit_price numeric(10,2) not null,
        order_id bigint not null,
        order_item_id bigint generated by default as identity,
        product_id bigint not null,
        primary key (order_item_id)
    )
2025-07-21 20:14:32 - 
    create table orders (
        total numeric(10,2) not null,
        created_at timestamp(6) not null,
        order_id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        status enum ('CANCELLED','CONFIRMED','DELIVERED','PENDING','SHIPPED') not null,
        primary key (order_id)
    )
Hibernate: 
    create table orders (
        total numeric(10,2) not null,
        created_at timestamp(6) not null,
        order_id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        status enum ('CANCELLED','CONFIRMED','DELIVERED','PENDING','SHIPPED') not null,
        primary key (order_id)
    )
2025-07-21 20:14:32 - 
    create table payments (
        amount numeric(10,2) not null,
        card_last_four varchar(4),
        currency varchar(3) not null,
        created_at timestamp(6) not null,
        order_id bigint not null,
        payment_id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        card_brand varchar(20),
        payment_method varchar(50),
        description varchar(500),
        error_message varchar(1000),
        customer_email varchar(255),
        payment_intent_id varchar(255) unique,
        status enum ('CANCELLED','COMPLETED','FAILED','PENDING','PROCESSING','REFUNDED') not null,
        primary key (payment_id)
    )
Hibernate: 
    create table payments (
        amount numeric(10,2) not null,
        card_last_four varchar(4),
        currency varchar(3) not null,
        created_at timestamp(6) not null,
        order_id bigint not null,
        payment_id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        card_brand varchar(20),
        payment_method varchar(50),
        description varchar(500),
        error_message varchar(1000),
        customer_email varchar(255),
        payment_intent_id varchar(255) unique,
        status enum ('CANCELLED','COMPLETED','FAILED','PENDING','PROCESSING','REFUNDED') not null,
        primary key (payment_id)
    )
2025-07-21 20:14:32 - 
    create table product_categories (
        category_id bigint not null,
        product_id bigint not null,
        primary key (category_id, product_id)
    )
Hibernate: 
    create table product_categories (
        category_id bigint not null,
        product_id bigint not null,
        primary key (category_id, product_id)
    )
2025-07-21 20:14:32 - 
    create table products (
        base_price numeric(10,2) not null,
        currency varchar(3) not null,
        is_active boolean not null,
        is_featured boolean not null,
        sale_price numeric(10,2),
        created_at timestamp(6) not null,
        product_id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        sku varchar(50) not null unique,
        description TEXT,
        name varchar(255) not null,
        slug varchar(255) not null unique,
        primary key (product_id)
    )
Hibernate: 
    create table products (
        base_price numeric(10,2) not null,
        currency varchar(3) not null,
        is_active boolean not null,
        is_featured boolean not null,
        sale_price numeric(10,2),
        created_at timestamp(6) not null,
        product_id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        sku varchar(50) not null unique,
        description TEXT,
        name varchar(255) not null,
        slug varchar(255) not null unique,
        primary key (product_id)
    )
2025-07-21 20:14:32 - 
    create table transactions (
        amount numeric(10,2) not null,
        currency varchar(3) not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        payment_id bigint not null,
        updated_at timestamp(6) not null,
        gateway varchar(50),
        payment_method varchar(50),
        error_message varchar(1000),
        external_transaction_id varchar(255),
        gateway_response varchar(255),
        status enum ('CANCELLED','FAILED','PENDING','REFUNDED','SUCCESSFUL') not null,
        primary key (id)
    )
Hibernate: 
    create table transactions (
        amount numeric(10,2) not null,
        currency varchar(3) not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        payment_id bigint not null,
        updated_at timestamp(6) not null,
        gateway varchar(50),
        payment_method varchar(50),
        error_message varchar(1000),
        external_transaction_id varchar(255),
        gateway_response varchar(255),
        status enum ('CANCELLED','FAILED','PENDING','REFUNDED','SUCCESSFUL') not null,
        primary key (id)
    )
2025-07-21 20:14:32 - 
    create table users (
        is_active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint generated by default as identity,
        phone varchar(20),
        first_name varchar(50) not null,
        last_name varchar(50) not null,
        email varchar(255) not null unique,
        password varchar(255) not null,
        primary key (user_id)
    )
Hibernate: 
    create table users (
        is_active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint generated by default as identity,
        phone varchar(20),
        first_name varchar(50) not null,
        last_name varchar(50) not null,
        email varchar(255) not null unique,
        password varchar(255) not null,
        primary key (user_id)
    )
2025-07-21 20:14:32 - 
    alter table if exists cart_items 
       add constraint FKpcttvuq4mxppo8sxggjtn5i2c 
       foreign key (cart_id) 
       references carts
Hibernate: 
    alter table if exists cart_items 
       add constraint FKpcttvuq4mxppo8sxggjtn5i2c 
       foreign key (cart_id) 
       references carts
2025-07-21 20:14:32 - 
    alter table if exists cart_items 
       add constraint FK1re40cjegsfvw58xrkdp6bac6 
       foreign key (product_id) 
       references products
Hibernate: 
    alter table if exists cart_items 
       add constraint FK1re40cjegsfvw58xrkdp6bac6 
       foreign key (product_id) 
       references products
2025-07-21 20:14:32 - 
    alter table if exists carts 
       add constraint FKb5o626f86h46m4s7ms6ginnop 
       foreign key (user_id) 
       references users
Hibernate: 
    alter table if exists carts 
       add constraint FKb5o626f86h46m4s7ms6ginnop 
       foreign key (user_id) 
       references users
2025-07-21 20:14:32 - 
    alter table if exists order_items 
       add constraint FKbioxgbv59vetrxe0ejfubep1w 
       foreign key (order_id) 
       references orders
Hibernate: 
    alter table if exists order_items 
       add constraint FKbioxgbv59vetrxe0ejfubep1w 
       foreign key (order_id) 
       references orders
2025-07-21 20:14:32 - 
    alter table if exists product_categories 
       add constraint FKd112rx0alycddsms029iifrih 
       foreign key (category_id) 
       references categories
Hibernate: 
    alter table if exists product_categories 
       add constraint FKd112rx0alycddsms029iifrih 
       foreign key (category_id) 
       references categories
2025-07-21 20:14:32 - 
    alter table if exists product_categories 
       add constraint FKlda9rad6s180ha3dl1ncsp8n7 
       foreign key (product_id) 
       references products
Hibernate: 
    alter table if exists product_categories 
       add constraint FKlda9rad6s180ha3dl1ncsp8n7 
       foreign key (product_id) 
       references products
2025-07-21 20:14:32 - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-07-21 20:14:32 - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-07-21 20:14:32 - Filter 'jwtAuthenticationFilter' configured for use
2025-07-21 20:14:33 - Stripe API initialized with secret key
2025-07-21 20:14:33 - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-07-21 20:14:33 - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-07-21 20:14:33 - Will secure any request with filters: DisableEncodeUrlFilter, WebAsyncManagerIntegrationFilter, SecurityContextHolderFilter, HeaderWriterFilter, CorsFilter, LogoutFilter, JwtAuthenticationFilter, RequestCacheAwareFilter, SecurityContextHolderAwareRequestFilter, AnonymousAuthenticationFilter, SessionManagementFilter, ExceptionTranslationFilter, AuthorizationFilter
2025-07-21 20:14:33 - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-07-21 20:14:34 - Unable to start LiveReload server
2025-07-21 20:14:34 - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-07-21 20:14:34 - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-07-21 20:14:34 - 
    drop table if exists cart_items cascade 
Hibernate: 
    drop table if exists cart_items cascade 
2025-07-21 20:14:34 - 
    drop table if exists carts cascade 
Hibernate: 
    drop table if exists carts cascade 
2025-07-21 20:14:34 - 
    drop table if exists categories cascade 
Hibernate: 
    drop table if exists categories cascade 
2025-07-21 20:14:34 - 
    drop table if exists event_entity cascade 
Hibernate: 
    drop table if exists event_entity cascade 
2025-07-21 20:14:34 - 
    drop table if exists notifications cascade 
Hibernate: 
    drop table if exists notifications cascade 
2025-07-21 20:14:34 - 
    drop table if exists order_items cascade 
Hibernate: 
    drop table if exists order_items cascade 
2025-07-21 20:14:34 - 
    drop table if exists orders cascade 
Hibernate: 
    drop table if exists orders cascade 
2025-07-21 20:14:34 - 
    drop table if exists payments cascade 
Hibernate: 
    drop table if exists payments cascade 
2025-07-21 20:14:34 - 
    drop table if exists product_categories cascade 
Hibernate: 
    drop table if exists product_categories cascade 
2025-07-21 20:14:34 - 
    drop table if exists products cascade 
Hibernate: 
    drop table if exists products cascade 
2025-07-21 20:14:34 - 
    drop table if exists transactions cascade 
Hibernate: 
    drop table if exists transactions cascade 
2025-07-21 20:14:34 - 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
2025-07-21 20:14:34 - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-232]
2025-07-21 20:14:34 - HikariPool-1 - Shutdown initiated...
2025-07-21 20:14:34 - HikariPool-1 - Shutdown completed.
2025-07-21 20:14:34 - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-21 20:14:34 - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8081 was already in use.

Action:

Identify and stop the process that's listening on port 8081 or configure this application to listen on another port.

[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] [1;32mBUILD SUCCESS[m
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
[[1;34mINFO[m] Total time:  14.200 s
[[1;34mINFO[m] Finished at: 2025-07-21T20:14:34+06:00
[[1;34mINFO[m] [1m------------------------------------------------------------------------[m
